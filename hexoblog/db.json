{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logoc.png","path":"images/logoc.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/zfb.png","path":"images/zfb.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/click.js","path":"js/click.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585894939393},{"_id":"source/CNAME","hash":"a790a62da26d494d72d1e2a5858f99fe73fd4f13","modified":1591176658174},{"_id":"source/404.html","hash":"0ad51e7a5a195f9ae04e2a7096e83dbfc15e7515","modified":1585885806659},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1585366943000},{"_id":"themes/icarus/_config.yml","hash":"79d96ce3c72164cf229eb8139daf4c74cc06da44","modified":1585909276872},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1585366943000},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1585366943000},{"_id":"themes/icarus/.DS_Store","hash":"a925dbbc9e5897b5d1970162e0170efa7e9313be","modified":1585908778127},{"_id":"themes/icarus/package.json","hash":"4f362aa241ad5d5d9422cc8f1e825edfcd8cbb1a","modified":1585366943000},{"_id":"source/_posts/baidu.md","hash":"dd66ab18e75bc8031e1b9675e89ed3a34db16129","modified":1591176639137},{"_id":"source/_posts/start.md","hash":"6b1065043d3c84358f11ed3ea4b191012151b7f6","modified":1585884207598},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1585366943000},{"_id":"source/_posts/blog-tips.md","hash":"62d73f9d29f455d0f428668e48ca9d62663a9340","modified":1585909572252},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1585366943000},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1585366943000},{"_id":"themes/icarus/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1585366943000},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1585366943000},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1585366943000},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1585366943000},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1585366943000},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1585366943000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1585366943000},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1585366943000},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1585366943000},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1585366943000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1585366943000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1585366943000},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1585366943000},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1585366943000},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1585366943000},{"_id":"themes/icarus/layout/.DS_Store","hash":"4fd34872518051b8c32bf82e451904b098d83d3a","modified":1585908781208},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1585366943000},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1585366943000},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1585366943000},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1585366943000},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1585366943000},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1585366943000},{"_id":"themes/icarus/scripts/index.js","hash":"40839db58041e31eb06d428a91869b0789277e7e","modified":1585366943000},{"_id":"themes/icarus/source/.DS_Store","hash":"1547be2bcfd2c62ba7581416a91e49e8ff1bd341","modified":1585880892933},{"_id":"source/_posts/JS/ES6-promise.md","hash":"3372436b779010eecdb728fb4d90d74c46b46347","modified":1587458093573},{"_id":"source/_posts/Tool/gearhost.md","hash":"6a1eaaa176bfe6c237a5e5f72aa867598fe8dab0","modified":1587458118415},{"_id":"source/_posts/Tool/heroku.md","hash":"ed8a15afe186dfc44c1a3cccc1b53d79606f3e5a","modified":1587458111371},{"_id":"source/_posts/Tool/ippenetrate.md","hash":"9e9974c7f52d1a6cddc1ed8c875d9ff4b13975f7","modified":1587458742766},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1585366943000},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1585366943000},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1585366943000},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1585366943000},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1585366943000},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1585366943000},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/override.js","hash":"223771860caddffcbce7d84dfb07798f6aa0bdda","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1585366943000},{"_id":"themes/icarus/includes/helpers/site.js","hash":"3edf5a4f0a1defcd6895d61e234681de3f10d772","modified":1585366943000},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1585366943000},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"e4735686bbf24ac89a4a9b578498ef3e5f5edbea","modified":1585366943000},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1585366943000},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"d1ab5bcf1c2be3ad36962944f635ef1f15ce14e0","modified":1585366943000},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1585366943000},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1585366943000},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1585366943000},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1585366943000},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1585366943000},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1585366943000},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1585366943000},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1585366943000},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1585366943000},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1585366943000},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"ab08051f785eab2a0685aa537270d2988bc13639","modified":1585366943000},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1585366943000},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1585366943000},{"_id":"themes/icarus/includes/utils/lru.js","hash":"35c0ede3553549758ff5e4ded2bc650778793377","modified":1585366943000},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1585366943000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1585366943000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1585366943000},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1585366943000},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1585366943000},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1585366943000},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1585366943000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1585366943000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1585366943000},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1585366943000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1585366943000},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1585366943000},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/comment/utterances.ejs","hash":"bf04ba1129aa75030397074d1470103ac7604784","modified":1585366943000},{"_id":"themes/icarus/layout/comment/utterances.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"31471cd05018583249b4c09a78cf1d02e7987244","modified":1585366943000},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1585366943000},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1585366943000},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1585366943000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1585366943000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"684d635fc043887948a4911e146adc80c467a41a","modified":1585903390705},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"d61066fa6ec41d228052a2bd4372ed7eddb3fadb","modified":1585909232188},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1585366943000},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1585366943000},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"ae864bd0c25f8488db4e64fe29c679395764b28b","modified":1585906748915},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1585366943000},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"fc19da9674649c035d133535078ff7e37d0f54c1","modified":1585366943000},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"a62f888ea6a204fc729204518f08ccfbcf9f7954","modified":1585908743406},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"dbb90fa9214d659ea6bbd5a92ea00888adf3761e","modified":1585366943000},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1585366943000},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1585366943000},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1585366943000},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1585366943000},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1585366943000},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1585366943000},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1585366943000},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1585366943000},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"10f9f3ab9903ab35b9c01ad01428951e4eba749f","modified":1585903902701},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1585366943000},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1585366943000},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"bb6510193632413e83227bdffad7c3b37629dcde","modified":1585366943000},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1585366943000},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"b5dfd0db3851bf046f28431c9f2adcecc1e7b1df","modified":1585366943000},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1585366943000},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1585366943000},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1585366943000},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1585366943000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1585366943000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1585366943000},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1585366943000},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1585366943000},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1585366943000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1585366943000},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1585366943000},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1585366943000},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1585366943000},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1585366943000},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1585366943000},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1585366943000},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1585366943000},{"_id":"themes/icarus/source/css/style.styl","hash":"9f68089a58af4b934485a45e0a45b18380ebce45","modified":1585909345068},{"_id":"themes/icarus/source/images/.DS_Store","hash":"7c753835bbd4c78ca96365ad222039e7574a11a7","modified":1585884711819},{"_id":"themes/icarus/source/images/avatar.png","hash":"5be4bb2d584069573deef7eaf5defdec6973b2ef","modified":1585792681094},{"_id":"themes/icarus/source/images/logoc.png","hash":"6d73b51857ae6e2cf3632bd56e318798a6f48573","modified":1585793555140},{"_id":"themes/icarus/source/images/logo.png","hash":"60d344af740ce2a4f3cae8f1a08132fe4a2a06f8","modified":1585880857361},{"_id":"themes/icarus/source/images/favicon.svg","hash":"e90d124d28691448436ea94052eaad7ec5e319ff","modified":1585792916574},{"_id":"themes/icarus/source/images/paypal.png","hash":"eaf07be5a804c1feeca02501ec98b684d44ae96e","modified":1585821540257},{"_id":"themes/icarus/source/images/wechat.png","hash":"3ba2ff4a9d2b54c814eff9908da9c5234d6dd27a","modified":1585821409969},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1585366943000},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1585366943000},{"_id":"themes/icarus/source/images/zfb.png","hash":"f2aee5355bc6a716eb2b5afcf607c6c15f6c301e","modified":1585821393931},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1585366943000},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1585366943000},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1585366943000},{"_id":"themes/icarus/source/js/click.js","hash":"41041c9e18cccede6b45cb76e327847099f8686d","modified":1585901352463},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1585366943000},{"_id":"themes/icarus/source/js/main.js","hash":"9b7063b2faf8cc43e8539d777285e20574011769","modified":1585366943000},{"_id":"public/content.json","hash":"6ba3b3c82f60ee2dcb0fbbf295c85f93689d9d06","modified":1595586714283},{"_id":"public/404.html","hash":"4578c297f57cfc29fd7c4f7e52afb1040632ddb6","modified":1595586714283},{"_id":"public/2020/04/21/baidu/index.html","hash":"7a5dcb8202ba91fa111d37e678f13036604f6766","modified":1595586714283},{"_id":"public/2020/04/21/Tool/ippenetrate/index.html","hash":"325c070085ae831254e265c51e0920e5fba93911","modified":1591176647185},{"_id":"public/2020/04/21/Tool/gearhost/index.html","hash":"72e2d5d060bb605dbeb950f522fa9aa63b7d9fb9","modified":1591176647185},{"_id":"public/2020/04/21/Tool/heroku/index.html","hash":"3889fd10bcd0c329568833673240e8675ec11e30","modified":1591176647185},{"_id":"public/2020/04/03/blog-tips/index.html","hash":"36cfcbb2738bc1d5db0bdb5006c0548272c310c3","modified":1595586714283},{"_id":"public/2020/04/02/JS/ES6-promise/index.html","hash":"5fc007489dcdb5ed5b1eee4fb5ca413f9a6e6c40","modified":1595586714283},{"_id":"public/2020/03/31/start/index.html","hash":"7f7b953e0ce3409f6d048eb12555fa96ce552a6e","modified":1595586714283},{"_id":"public/archives/index.html","hash":"4b7ca4908a8b2fc7a36fd51dd186e8384871dbf4","modified":1595586714283},{"_id":"public/archives/2020/index.html","hash":"8d53e09a734bf42e216520c73f5a9c6440af8bba","modified":1595586714283},{"_id":"public/archives/2020/03/index.html","hash":"a378f833728b51422684d39e87d4a17ac59114dc","modified":1595586714283},{"_id":"public/archives/2020/04/index.html","hash":"9eec7cdce4b25ddbddae0d29c4f362ca395de196","modified":1595586714283},{"_id":"public/categories/JS/index.html","hash":"431b044d5a49a737fdbcc8febc17b720667ca859","modified":1595586714283},{"_id":"public/categories/Tool/index.html","hash":"7bb0d59590682d8adae59a0066a68d58e5ed5e5f","modified":1595586714283},{"_id":"public/index.html","hash":"4cdfcb227c02c66b2d96b25497106bf0e3eded71","modified":1595586714283},{"_id":"public/tags/Tips/index.html","hash":"589709b40027eb9e362ca708fa852eb485b19e5f","modified":1595586714283},{"_id":"public/tags/Promise/index.html","hash":"7741d35768c8fc20a0a5ba6e7aff09a9ff3c6ce6","modified":1595586714283},{"_id":"public/tags/GearHost/index.html","hash":"4361ccbc6c2116ca88e288655b25198dc17f6389","modified":1595586714283},{"_id":"public/tags/Heroku/index.html","hash":"4b4d436255c698fc359ad2aa57e769899bb59097","modified":1595586714283},{"_id":"public/tags/路由端口映射/index.html","hash":"d42df4852c2bccaf0206e9c5a0f0a1c08f8b8736","modified":1595586714283},{"_id":"public/categories/index.html","hash":"fb9606b651e790fd71fc634021d16c26df411686","modified":1595586714283},{"_id":"public/tags/index.html","hash":"05611fd4607542dd6d66301a920e30d530d5c378","modified":1595586714283},{"_id":"public/CNAME","hash":"70898e78643c9d801d0cb87ec4060ec0d728509b","modified":1591176647185},{"_id":"public/images/avatar.png","hash":"5be4bb2d584069573deef7eaf5defdec6973b2ef","modified":1587459583658},{"_id":"public/images/logoc.png","hash":"6d73b51857ae6e2cf3632bd56e318798a6f48573","modified":1587459583658},{"_id":"public/images/logo.png","hash":"60d344af740ce2a4f3cae8f1a08132fe4a2a06f8","modified":1587459583658},{"_id":"public/images/paypal.png","hash":"eaf07be5a804c1feeca02501ec98b684d44ae96e","modified":1587459583658},{"_id":"public/images/favicon.svg","hash":"e90d124d28691448436ea94052eaad7ec5e319ff","modified":1587459583658},{"_id":"public/images/wechat.png","hash":"3ba2ff4a9d2b54c814eff9908da9c5234d6dd27a","modified":1587459583658},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1587459583658},{"_id":"public/images/zfb.png","hash":"f2aee5355bc6a716eb2b5afcf607c6c15f6c301e","modified":1587459583658},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1587459583658},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1587459583658},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1587459583658},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1587459583658},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1587459583658},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1587459583658},{"_id":"public/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1587459583658},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1587459583658},{"_id":"public/js/click.js","hash":"41041c9e18cccede6b45cb76e327847099f8686d","modified":1587459583658},{"_id":"public/js/main.js","hash":"9b7063b2faf8cc43e8539d777285e20574011769","modified":1587459583658},{"_id":"public/css/style.css","hash":"dc0ea8ccf87ab6dbb70052de1a9df47febcd5c42","modified":1587459583658},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1587459583658},{"_id":"public/tags/baidu/index.html","hash":"a29980c9070c2c657d51e9fd18b5507efd9b1a2a","modified":1595586714283},{"_id":"source/_posts/Tool/qrcode.md","hash":"d0bc117ef6958585164899f4c197c3cc62fbd868","modified":1595586493606},{"_id":"public/2020/06/03/Tool/qrcode/index.html","hash":"674b680f3a2bc7e39b4a70b7d766647463002963","modified":1595586714283},{"_id":"public/2020/06/03/Tool/ippenetrate/index.html","hash":"228e33d091c3fe4906b316541a402bb8db290a03","modified":1595586714283},{"_id":"public/2020/06/03/Tool/heroku/index.html","hash":"92e018078b8e784e55187c08bcf9c2ed6e06dc96","modified":1595586714283},{"_id":"public/2020/06/03/Tool/gearhost/index.html","hash":"7980e50b35ec154c74da1350bc8256ead5b7660c","modified":1595586714283},{"_id":"public/archives/2020/06/index.html","hash":"d46002a803e9030d6cc914aa2e0eb5c328b1c3a3","modified":1595586714283},{"_id":"public/tags/QRCode/index.html","hash":"044a02987146d8e2eb068bd9d59c069cad13199f","modified":1595586714283},{"_id":"source/_posts/Node/vpn_L2TP.md","hash":"519cc2dcb13c305f39b2ae3650e12375f61398e6","modified":1595583326897},{"_id":"source/_posts/Node/vpn2.md","hash":"198cac23a1d42a5feb684e5c67e00e8f1e3f05b1","modified":1595586288495},{"_id":"public/2020/07/24/Node/vpn2/index.html","hash":"79bd103e283223fdc37b0041c38a08f4a35f3c39","modified":1595586714283},{"_id":"public/2020/07/24/Node/vpn_L2TP/index.html","hash":"70680302945ef13559280a181744b58952c9e2d0","modified":1595586714283},{"_id":"public/archives/2020/07/index.html","hash":"7c5c661255b17087a14149b90972fd06a62f941f","modified":1595586714283},{"_id":"public/categories/Node/index.html","hash":"d46e615a4067d8b25f9ccd481041854e5202289e","modified":1595586714283},{"_id":"public/tags/VPN-L2TP/index.html","hash":"afa05dd77ed0a9bffbd4cd075ad534d2889f10d1","modified":1595586714283}],"Category":[{"name":"JS","_id":"ck99og6if00088fwl9uckdby2"},{"name":"Tool","_id":"ck99og6ii000c8fwldrj17zx6"},{"name":"Node","_id":"ckd0007o90001r1wlhi6h40lg"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n</head>\n\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n    homePageUrl=\"https://www.2048888.xyz\" homePageName=\"回到我的主页\"></script>\n</body>\n\n</html>","source":"404.html","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n</head>\n\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n    homePageUrl=\"https://www.2048888.xyz\" homePageName=\"回到我的主页\"></script>\n</body>\n\n</html>","date":"2020-04-03T03:50:06.659Z","updated":"2020-04-03T03:50:06.659Z","path":"/404.html","layout":"page","_id":"ck99og6gw00008fwlh71n8ulc","content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n</head>\n\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n    homePageUrl=\"https://www.2048888.xyz\" homePageName=\"回到我的主页\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n</head>\n\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n    homePageUrl=\"https://www.2048888.xyz\" homePageName=\"回到我的主页\"></script>\n</body>\n\n</html>"}],"Post":[{"title":"百度语音合成演示","comments":1,"_content":"\n<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>百度语音合成</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .btn-primary {\n      margin: 20px;\n      width: 100px;\n      float: right;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">百度语音合成演示</h1>\n    <div>\n      <textarea id=\"text\" class=\"form-control\" rows=\"5\" placeholder=\"输入要合成的文本\"></textarea>\n      <a download=\"audio.mp3\" id=\"btn\" type=\"audio/mp3\" class=\"btn btn-primary\">合成</a>\n    </div>\n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#btn\").click(function () {\n      // console.log($('#text').val())\n      let url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=7&pit=8&vol=8&per=1&aue=3&text=\" + $('#text').val().trim();\n      $(this).attr('href', url)\n      // $.ajax({\n      //   type: \"get\",\n      //   url: \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=8&text=\" + $('#text').val().trim(),\n      //   // dataType: \"json\",\n      //   success: function (data) {\n      //     console.log(data);\n      //     $('.container a').attr('href')\n      //   },\n      //   error: function (err) {\n      //     console.log(err)\n      //   }\n      // });\n      setTimeout(function(){\n        $('#text').val('')\n      },1000)\n    });\n  </script>\n</body>\n\n</html>\n","source":"_posts/baidu.md","raw":"---\ntitle: 百度语音合成演示\ncomments: true\ntags: baidu\n---\n\n<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>百度语音合成</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .btn-primary {\n      margin: 20px;\n      width: 100px;\n      float: right;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">百度语音合成演示</h1>\n    <div>\n      <textarea id=\"text\" class=\"form-control\" rows=\"5\" placeholder=\"输入要合成的文本\"></textarea>\n      <a download=\"audio.mp3\" id=\"btn\" type=\"audio/mp3\" class=\"btn btn-primary\">合成</a>\n    </div>\n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#btn\").click(function () {\n      // console.log($('#text').val())\n      let url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=7&pit=8&vol=8&per=1&aue=3&text=\" + $('#text').val().trim();\n      $(this).attr('href', url)\n      // $.ajax({\n      //   type: \"get\",\n      //   url: \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=8&text=\" + $('#text').val().trim(),\n      //   // dataType: \"json\",\n      //   success: function (data) {\n      //     console.log(data);\n      //     $('.container a').attr('href')\n      //   },\n      //   error: function (err) {\n      //     console.log(err)\n      //   }\n      // });\n      setTimeout(function(){\n        $('#text').val('')\n      },1000)\n    });\n  </script>\n</body>\n\n</html>\n","slug":"baidu","published":1,"date":"2020-04-21T08:59:05.043Z","updated":"2020-06-03T09:54:21.911Z","_id":"ck99og6hf00018fwl3uou7hei","layout":"post","photos":[],"link":"","content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>百度语音合成</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .btn-primary {\n      margin: 20px;\n      width: 100px;\n      float: right;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">百度语音合成演示</h1>\n    <div>\n      <textarea id=\"text\" class=\"form-control\" rows=\"5\" placeholder=\"输入要合成的文本\"></textarea>\n      <a download=\"audio.mp3\" id=\"btn\" type=\"audio/mp3\" class=\"btn btn-primary\">合成</a>\n    </div>\n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#btn\").click(function () {\n      // console.log($('#text').val())\n      let url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=7&pit=8&vol=8&per=1&aue=3&text=\" + $('#text').val().trim();\n      $(this).attr('href', url)\n      // $.ajax({\n      //   type: \"get\",\n      //   url: \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=8&text=\" + $('#text').val().trim(),\n      //   // dataType: \"json\",\n      //   success: function (data) {\n      //     console.log(data);\n      //     $('.container a').attr('href')\n      //   },\n      //   error: function (err) {\n      //     console.log(err)\n      //   }\n      // });\n      setTimeout(function(){\n        $('#text').val('')\n      },1000)\n    });\n  </script>\n</body>\n\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>百度语音合成</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .btn-primary {\n      margin: 20px;\n      width: 100px;\n      float: right;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">百度语音合成演示</h1>\n    <div>\n      <textarea id=\"text\" class=\"form-control\" rows=\"5\" placeholder=\"输入要合成的文本\"></textarea>\n      <a download=\"audio.mp3\" id=\"btn\" type=\"audio/mp3\" class=\"btn btn-primary\">合成</a>\n    </div>\n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#btn\").click(function () {\n      // console.log($('#text').val())\n      let url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=7&pit=8&vol=8&per=1&aue=3&text=\" + $('#text').val().trim();\n      $(this).attr('href', url)\n      // $.ajax({\n      //   type: \"get\",\n      //   url: \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=8&text=\" + $('#text').val().trim(),\n      //   // dataType: \"json\",\n      //   success: function (data) {\n      //     console.log(data);\n      //     $('.container a').attr('href')\n      //   },\n      //   error: function (err) {\n      //     console.log(err)\n      //   }\n      // });\n      setTimeout(function(){\n        $('#text').val('')\n      },1000)\n    });\n  </script>\n</body>\n\n</html>\n"},{"title":"我的第一篇Blog","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/js.png","_content":"\n使用[Hexo](https://hexo.io/)和 githubpages 搭建个人博客!\n\n<!-- more -->\n\n## 快速开始\n\n### 创建一片文章\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动服务\n\n```bash\n$ hexo server or hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n```bash\n$ hexo generate or hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到线上\n\n- 在根目录下\\_config.yml 里面任意位置新增以下语句\n- 建议通过密钥的方式关联\n\n```bash\ndeploy:\n  type: git\n  # 填上你自己的仓库名，注意后面有`.git`\n  repository: git@github.com:your_username/your_username.github.io.git\n  branch: master\n```\n\n```bash\n$ hexo deploy or hexo d\n```\n\n### 自定义域名\n\n- 到域名解析后台记录类型选择 CNAME 新增解析， 主机记录填 www-> 解析线路选择默认-> 记录值填 yourname.github.io\n- 再添加一个解析，记录类型 A 主机记录填 www-> 解析线路选择默认-> 记录值填你 GitHub 的 ip 地址（在 cmd 中）ping yourname.github.io\n- 解析生效后 www.your 域名.xxx 将被解析到 https://yourname.github.io/（你的githubpages主页）\n\n### 解决每次 deploy 自定义域名失效问题\n\n- 这个问题原因是每次部署后原来的文件被替换了，而 Hexo 生成的静态文件没有这个 CNAME 记录\n- 解决办法：在 source 文件夹新增文件 CNAME 文件，内容为 你的域名地址 例如：www.2048888.xyz\n- 其他方式：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME 文件，比较麻烦。\n\n前往 Hexo 文档[documentation](https://hexo.io/docs/) 查看更多帮助。\n","source":"_posts/start.md","raw":"---\ntitle: 我的第一篇Blog\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/js.png'\n---\n\n使用[Hexo](https://hexo.io/)和 githubpages 搭建个人博客!\n\n<!-- more -->\n\n## 快速开始\n\n### 创建一片文章\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动服务\n\n```bash\n$ hexo server or hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n```bash\n$ hexo generate or hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到线上\n\n- 在根目录下\\_config.yml 里面任意位置新增以下语句\n- 建议通过密钥的方式关联\n\n```bash\ndeploy:\n  type: git\n  # 填上你自己的仓库名，注意后面有`.git`\n  repository: git@github.com:your_username/your_username.github.io.git\n  branch: master\n```\n\n```bash\n$ hexo deploy or hexo d\n```\n\n### 自定义域名\n\n- 到域名解析后台记录类型选择 CNAME 新增解析， 主机记录填 www-> 解析线路选择默认-> 记录值填 yourname.github.io\n- 再添加一个解析，记录类型 A 主机记录填 www-> 解析线路选择默认-> 记录值填你 GitHub 的 ip 地址（在 cmd 中）ping yourname.github.io\n- 解析生效后 www.your 域名.xxx 将被解析到 https://yourname.github.io/（你的githubpages主页）\n\n### 解决每次 deploy 自定义域名失效问题\n\n- 这个问题原因是每次部署后原来的文件被替换了，而 Hexo 生成的静态文件没有这个 CNAME 记录\n- 解决办法：在 source 文件夹新增文件 CNAME 文件，内容为 你的域名地址 例如：www.2048888.xyz\n- 其他方式：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME 文件，比较麻烦。\n\n前往 Hexo 文档[documentation](https://hexo.io/docs/) 查看更多帮助。\n","slug":"start","published":1,"date":"2020-03-31T10:16:03.838Z","updated":"2020-04-03T03:23:27.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99og6hj00028fwlg44h3q1y","content":"<p>使用<a href=\"https://hexo.io/\">Hexo</a>和 githubpages 搭建个人博客!</p>\n<a id=\"more\"></a>\n\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一片文章\"><a href=\"#创建一片文章\" class=\"headerlink\" title=\"创建一片文章\"></a>创建一片文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server or hexo s</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate or hexo g</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h3><ul>\n<li>在根目录下_config.yml 里面任意位置新增以下语句</li>\n<li>建议通过密钥的方式关联</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  <span class=\"comment\"># 填上你自己的仓库名，注意后面有`.git`</span></span><br><span class=\"line\">  repository: git@github.com:your_username/your_username.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy or hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h3><ul>\n<li>到域名解析后台记录类型选择 CNAME 新增解析， 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填 yourname.github.io</li>\n<li>再添加一个解析，记录类型 A 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填你 GitHub 的 ip 地址（在 cmd 中）ping yourname.github.io</li>\n<li>解析生效后 <a href=\"http://www.your\">www.your</a> 域名.xxx 将被解析到 <a href=\"https://yourname.github.io/（你的githubpages主页）\">https://yourname.github.io/（你的githubpages主页）</a></li>\n</ul>\n<h3 id=\"解决每次-deploy-自定义域名失效问题\"><a href=\"#解决每次-deploy-自定义域名失效问题\" class=\"headerlink\" title=\"解决每次 deploy 自定义域名失效问题\"></a>解决每次 deploy 自定义域名失效问题</h3><ul>\n<li>这个问题原因是每次部署后原来的文件被替换了，而 Hexo 生成的静态文件没有这个 CNAME 记录</li>\n<li>解决办法：在 source 文件夹新增文件 CNAME 文件，内容为 你的域名地址 例如：<a href=\"http://www.2048888.xyz\">www.2048888.xyz</a></li>\n<li>其他方式：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME 文件，比较麻烦。</li>\n</ul>\n<p>前往 Hexo 文档<a href=\"https://hexo.io/docs/\">documentation</a> 查看更多帮助。</p>\n","site":{"data":{}},"excerpt":"<p>使用<a href=\"https://hexo.io/\">Hexo</a>和 githubpages 搭建个人博客!</p>","more":"<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一片文章\"><a href=\"#创建一片文章\" class=\"headerlink\" title=\"创建一片文章\"></a>创建一片文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server or hexo s</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate or hexo g</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h3><ul>\n<li>在根目录下_config.yml 里面任意位置新增以下语句</li>\n<li>建议通过密钥的方式关联</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  <span class=\"comment\"># 填上你自己的仓库名，注意后面有`.git`</span></span><br><span class=\"line\">  repository: git@github.com:your_username/your_username.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy or hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h3><ul>\n<li>到域名解析后台记录类型选择 CNAME 新增解析， 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填 yourname.github.io</li>\n<li>再添加一个解析，记录类型 A 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填你 GitHub 的 ip 地址（在 cmd 中）ping yourname.github.io</li>\n<li>解析生效后 <a href=\"http://www.your\">www.your</a> 域名.xxx 将被解析到 <a href=\"https://yourname.github.io/（你的githubpages主页）\">https://yourname.github.io/（你的githubpages主页）</a></li>\n</ul>\n<h3 id=\"解决每次-deploy-自定义域名失效问题\"><a href=\"#解决每次-deploy-自定义域名失效问题\" class=\"headerlink\" title=\"解决每次 deploy 自定义域名失效问题\"></a>解决每次 deploy 自定义域名失效问题</h3><ul>\n<li>这个问题原因是每次部署后原来的文件被替换了，而 Hexo 生成的静态文件没有这个 CNAME 记录</li>\n<li>解决办法：在 source 文件夹新增文件 CNAME 文件，内容为 你的域名地址 例如：<a href=\"http://www.2048888.xyz\">www.2048888.xyz</a></li>\n<li>其他方式：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME 文件，比较麻烦。</li>\n</ul>\n<p>前往 Hexo 文档<a href=\"https://hexo.io/docs/\">documentation</a> 查看更多帮助。</p>"},{"title":"Blog编写技巧","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg2.jpg","comments":1,"_content":"\n写博文的技巧，及本博客功能设置详解。\n\n### 设置首页不显示全文(只显示预览)\n\n使用 `<!-- more -->`这个标签，可以放在 md 文件的任意位置，想在哪里结束就在哪里结束。你看到这里的下面一行就有这个句标示。\n\n<!-- more -->\n\n### 多标签格式\n\ntags: [a, b, c] 或 tags:\n\n- a\n- b\n- c\n\n### 插入视频\n\n{% vimeo video_id %}\n","source":"_posts/blog-tips.md","raw":"---\ntitle: Blog编写技巧\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg2.jpg'\ncomments: true\ntags: Tips\n---\n\n写博文的技巧，及本博客功能设置详解。\n\n### 设置首页不显示全文(只显示预览)\n\n使用 `<!-- more -->`这个标签，可以放在 md 文件的任意位置，想在哪里结束就在哪里结束。你看到这里的下面一行就有这个句标示。\n\n<!-- more -->\n\n### 多标签格式\n\ntags: [a, b, c] 或 tags:\n\n- a\n- b\n- c\n\n### 插入视频\n\n{% vimeo video_id %}\n","slug":"blog-tips","published":1,"date":"2020-04-03T03:30:14.240Z","updated":"2020-04-03T10:26:12.252Z","layout":"post","photos":[],"link":"","_id":"ck99og6hn00038fwl9f196241","content":"<p>写博文的技巧，及本博客功能设置详解。</p>\n<h3 id=\"设置首页不显示全文-只显示预览\"><a href=\"#设置首页不显示全文-只显示预览\" class=\"headerlink\" title=\"设置首页不显示全文(只显示预览)\"></a>设置首页不显示全文(只显示预览)</h3><p>使用 <code>&lt;!-- more --&gt;</code>这个标签，可以放在 md 文件的任意位置，想在哪里结束就在哪里结束。你看到这里的下面一行就有这个句标示。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"多标签格式\"><a href=\"#多标签格式\" class=\"headerlink\" title=\"多标签格式\"></a>多标签格式</h3><p>tags: [a, b, c] 或 tags:</p>\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ul>\n<h3 id=\"插入视频\"><a href=\"#插入视频\" class=\"headerlink\" title=\"插入视频\"></a>插入视频</h3><div class=\"video-container\"><iframe src=\"https://player.vimeo.com/video/video_id\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n","site":{"data":{}},"excerpt":"<p>写博文的技巧，及本博客功能设置详解。</p>\n<h3 id=\"设置首页不显示全文-只显示预览\"><a href=\"#设置首页不显示全文-只显示预览\" class=\"headerlink\" title=\"设置首页不显示全文(只显示预览)\"></a>设置首页不显示全文(只显示预览)</h3><p>使用 <code>&lt;!-- more --&gt;</code>这个标签，可以放在 md 文件的任意位置，想在哪里结束就在哪里结束。你看到这里的下面一行就有这个句标示。</p>","more":"<h3 id=\"多标签格式\"><a href=\"#多标签格式\" class=\"headerlink\" title=\"多标签格式\"></a>多标签格式</h3><p>tags: [a, b, c] 或 tags:</p>\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n</ul>\n<h3 id=\"插入视频\"><a href=\"#插入视频\" class=\"headerlink\" title=\"插入视频\"></a>插入视频</h3><div class=\"video-container\"><iframe src=\"https://player.vimeo.com/video/video_id\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>"},{"title":"Promise 简单实现","keywords":"ES6 promise","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/js/promise.jpg","abbrlink":"7e709353","comments":1,"_content":"\n#### 什么是 Promise\n\npromise 是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）,并未剥夺函数 return 的能力，因此无需层层传递 callback，进行回调获取数据,其代码风格，容易理解，便于维护并且多个异步等待合并便于解决,最终的目的是为了解决 JS 中过多的回调嵌套。\n\n<!-- more -->\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg1.jpg)\n\n```bash\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING\n    //初始化成功的回调\n    this.onResolvedCb = []\n    //初始化失败的回调\n    this.onRejectedCb = []\n    this.value = null\n    this.reason = null\n    try {\n      executor(this.resolve.bind(this), this.reject.bind(this))\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  resolve(value) {\n    console.log(value + 'resolve')\n    //如果当前状态是pending的话调用这个函数可以将状态改成fulfilled\n    if (this.status == PENDING) {\n      this.status = FULFILLED\n      // 将获取到的值赋值给当前对象，并且让所有的成功回调函数执行\n      this.value = value\n      this.onResolvedCb.forEach((item) => item(value))\n    }\n  }\n  reject(reason) {\n    console.log(reason + 'reject')\n    // 如果当前状态是pending的话调用这个函数可以将状态改成rejected\n    if (this.status == PENDING) {\n      this.status = REJECTED\n      // 将原因值赋值给当前对象，并且让所有的失败的回调函数执行\n      this.reason = reason\n      this.onRejectedCb.forEach((item) => item(reason))\n    }\n  }\n  then(onFulfilled, onRejected) {\n    let self = this\n    // 处理如果没有指定相应的回调时的情况\n    onFulfilled = typeof onFulfilled == 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected == 'function' ? onRejected : reason => { throw reason };\n    if (self.status === FULFILLED) {\n      let x = onFulfilled(self.value)\n    }\n    if (self.status === REJECTED) {\n      let y = onRejected(self.reason)\n    }\n    if (self.status === PENDING) {\n      self.onResolvedCb.push(function () {\n        let x = onFulfilled(self.value)\n      })\n      self.onRejectedCb.push(function () {\n        let x = onRejected(self.reason)\n      })\n    }\n  }\n}\nmodule.exports = Promise\n```\n","source":"_posts/JS/ES6-promise.md","raw":"---\ntitle: Promise 简单实现\ntags: Promise\n# toc: true\nkeywords: ES6 promise\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/js/promise.jpg'\ncategories:\n  - JS\nabbrlink: '7e709353'\ncomments: true\n---\n\n#### 什么是 Promise\n\npromise 是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）,并未剥夺函数 return 的能力，因此无需层层传递 callback，进行回调获取数据,其代码风格，容易理解，便于维护并且多个异步等待合并便于解决,最终的目的是为了解决 JS 中过多的回调嵌套。\n\n<!-- more -->\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg1.jpg)\n\n```bash\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING\n    //初始化成功的回调\n    this.onResolvedCb = []\n    //初始化失败的回调\n    this.onRejectedCb = []\n    this.value = null\n    this.reason = null\n    try {\n      executor(this.resolve.bind(this), this.reject.bind(this))\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  resolve(value) {\n    console.log(value + 'resolve')\n    //如果当前状态是pending的话调用这个函数可以将状态改成fulfilled\n    if (this.status == PENDING) {\n      this.status = FULFILLED\n      // 将获取到的值赋值给当前对象，并且让所有的成功回调函数执行\n      this.value = value\n      this.onResolvedCb.forEach((item) => item(value))\n    }\n  }\n  reject(reason) {\n    console.log(reason + 'reject')\n    // 如果当前状态是pending的话调用这个函数可以将状态改成rejected\n    if (this.status == PENDING) {\n      this.status = REJECTED\n      // 将原因值赋值给当前对象，并且让所有的失败的回调函数执行\n      this.reason = reason\n      this.onRejectedCb.forEach((item) => item(reason))\n    }\n  }\n  then(onFulfilled, onRejected) {\n    let self = this\n    // 处理如果没有指定相应的回调时的情况\n    onFulfilled = typeof onFulfilled == 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected == 'function' ? onRejected : reason => { throw reason };\n    if (self.status === FULFILLED) {\n      let x = onFulfilled(self.value)\n    }\n    if (self.status === REJECTED) {\n      let y = onRejected(self.reason)\n    }\n    if (self.status === PENDING) {\n      self.onResolvedCb.push(function () {\n        let x = onFulfilled(self.value)\n      })\n      self.onRejectedCb.push(function () {\n        let x = onRejected(self.reason)\n      })\n    }\n  }\n}\nmodule.exports = Promise\n```\n","slug":"JS/ES6-promise","published":1,"date":"2020-04-02T09:00:07.397Z","updated":"2020-04-21T08:34:53.573Z","layout":"post","photos":[],"link":"","_id":"ck99og6id00068fwl5x8i0cm1","content":"<h4 id=\"什么是-Promise\"><a href=\"#什么是-Promise\" class=\"headerlink\" title=\"什么是 Promise\"></a>什么是 Promise</h4><p>promise 是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）,并未剥夺函数 return 的能力，因此无需层层传递 callback，进行回调获取数据,其代码风格，容易理解，便于维护并且多个异步等待合并便于解决,最终的目的是为了解决 JS 中过多的回调嵌套。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg1.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const PENDING = <span class=\"string\">'pending'</span></span><br><span class=\"line\">const FULFILLED = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">const REJECTED = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(executor) &#123;</span><br><span class=\"line\">    this.status = PENDING</span><br><span class=\"line\">    //初始化成功的回调</span><br><span class=\"line\">    this.onResolvedCb = []</span><br><span class=\"line\">    //初始化失败的回调</span><br><span class=\"line\">    this.onRejectedCb = []</span><br><span class=\"line\">    this.value = null</span><br><span class=\"line\">    this.reason = null</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      executor(this.resolve.bind(this), this.reject.bind(this))</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      this.reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resolve(value) &#123;</span><br><span class=\"line\">    console.log(value + <span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">    //如果当前状态是pending的话调用这个函数可以将状态改成fulfilled</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (this.status == PENDING) &#123;</span><br><span class=\"line\">      this.status = FULFILLED</span><br><span class=\"line\">      // 将获取到的值赋值给当前对象，并且让所有的成功回调函数执行</span><br><span class=\"line\">      this.value = value</span><br><span class=\"line\">      this.onResolvedCb.forEach((item) =&gt; item(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  reject(reason) &#123;</span><br><span class=\"line\">    console.log(reason + <span class=\"string\">'reject'</span>)</span><br><span class=\"line\">    // 如果当前状态是pending的话调用这个函数可以将状态改成rejected</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (this.status == PENDING) &#123;</span><br><span class=\"line\">      this.status = REJECTED</span><br><span class=\"line\">      // 将原因值赋值给当前对象，并且让所有的失败的回调函数执行</span><br><span class=\"line\">      this.reason = reason</span><br><span class=\"line\">      this.onRejectedCb.forEach((item) =&gt; item(reason))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">then</span>(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    // 处理如果没有指定相应的回调时的情况</span><br><span class=\"line\">    onFulfilled = typeof onFulfilled == <span class=\"string\">'function'</span> ? onFulfilled : value =&gt; value;</span><br><span class=\"line\">    onRejected = typeof onRejected == <span class=\"string\">'function'</span> ? onRejected : reason =&gt; &#123; throw reason &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === FULFILLED) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> x = onFulfilled(self.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === REJECTED) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> y = onRejected(self.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === PENDING) &#123;</span><br><span class=\"line\">      self.onResolvedCb.push(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> x = onFulfilled(self.value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      self.onRejectedCb.push(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> x = onRejected(self.reason)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = Promise</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"什么是-Promise\"><a href=\"#什么是-Promise\" class=\"headerlink\" title=\"什么是 Promise\"></a>什么是 Promise</h4><p>promise 是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）,并未剥夺函数 return 的能力，因此无需层层传递 callback，进行回调获取数据,其代码风格，容易理解，便于维护并且多个异步等待合并便于解决,最终的目的是为了解决 JS 中过多的回调嵌套。</p>","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/image/bg1.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const PENDING = <span class=\"string\">'pending'</span></span><br><span class=\"line\">const FULFILLED = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">const REJECTED = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(executor) &#123;</span><br><span class=\"line\">    this.status = PENDING</span><br><span class=\"line\">    //初始化成功的回调</span><br><span class=\"line\">    this.onResolvedCb = []</span><br><span class=\"line\">    //初始化失败的回调</span><br><span class=\"line\">    this.onRejectedCb = []</span><br><span class=\"line\">    this.value = null</span><br><span class=\"line\">    this.reason = null</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      executor(this.resolve.bind(this), this.reject.bind(this))</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      this.reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resolve(value) &#123;</span><br><span class=\"line\">    console.log(value + <span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">    //如果当前状态是pending的话调用这个函数可以将状态改成fulfilled</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (this.status == PENDING) &#123;</span><br><span class=\"line\">      this.status = FULFILLED</span><br><span class=\"line\">      // 将获取到的值赋值给当前对象，并且让所有的成功回调函数执行</span><br><span class=\"line\">      this.value = value</span><br><span class=\"line\">      this.onResolvedCb.forEach((item) =&gt; item(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  reject(reason) &#123;</span><br><span class=\"line\">    console.log(reason + <span class=\"string\">'reject'</span>)</span><br><span class=\"line\">    // 如果当前状态是pending的话调用这个函数可以将状态改成rejected</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (this.status == PENDING) &#123;</span><br><span class=\"line\">      this.status = REJECTED</span><br><span class=\"line\">      // 将原因值赋值给当前对象，并且让所有的失败的回调函数执行</span><br><span class=\"line\">      this.reason = reason</span><br><span class=\"line\">      this.onRejectedCb.forEach((item) =&gt; item(reason))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">then</span>(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    // 处理如果没有指定相应的回调时的情况</span><br><span class=\"line\">    onFulfilled = typeof onFulfilled == <span class=\"string\">'function'</span> ? onFulfilled : value =&gt; value;</span><br><span class=\"line\">    onRejected = typeof onRejected == <span class=\"string\">'function'</span> ? onRejected : reason =&gt; &#123; throw reason &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === FULFILLED) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> x = onFulfilled(self.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === REJECTED) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">let</span> y = onRejected(self.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.status === PENDING) &#123;</span><br><span class=\"line\">      self.onResolvedCb.push(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> x = onFulfilled(self.value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      self.onRejectedCb.push(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> x = onRejected(self.reason)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = Promise</span><br></pre></td></tr></table></figure>"},{"title":"免费服务器 GearHost","keywords":"GearHost 免费服务器","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost.png","abbrlink":"7e709356","comments":1,"_content":"\n### 自己做了个小网站想发布到线上，但是没有服务器？\n\n上线还需要域名备案？太麻烦了吧。今天上干货，分享一个永久免费服务器的申请以及使用教程，满足展示、测试、学习等基本需求。\n\n#### 什么是 GearHost\n\nGearHost，它是国外一家主机商，提供免费和付费的主机套餐，支持 PHP、.Net 和 Node.js 程序。无需信用卡，注册就可以免费部署 100 个免费的网站和数据库。\n\n<!-- more -->\n\n### 首先，注册。\n\n这个注册也是不需要信用卡的，注册的其他事项就不啰嗦了，正常进行就好。\n\n### 第二步，创建一个实例。\n\n进入网站后醒目的 Add Cloudsite 按钮你应该看得到，点击后输入一个自定义二级域名，再点击创建等待一会就能完成，成功后会出现在列表里面，点击进入可以看到实例的一些信息。![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost02.png)\n\n### 第三步，部署实例。\n\nGearHost 提供三种部署方案，FTP 方式：这个比较简单，FTP 软件用户名和密码登陆，将部署文件直接拉到服务器文件夹里就可以了。开发软件方式：需要下载对应的部署插件，不推荐。连接 github 库的方式，个人推荐这种，方便。\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost04.png)\n\n最后，部署完成就可以访问你的网站了（在 overview 里面找到 PREVIEW URL），这个就是访问地址。\n\n### 总结\n\nGearHost 的优点是免费，无需信用卡，建站数量多，但是缺点也很明显，主机容量只有 100MB，免费的 Mysql 数据库只有 5Mb，MongoDB10Mb 内存是 256MB，CPU 占用为 5%，不支持 ssl 等等。个人认为相比较国内而言 GearHost 算是一个很不错的练手工具，毕竟国内根本不存在这样良心的厂商，毕竟免费还能运行 PHP、.Net 或者 Node.js。另外这个网站的实例还是比较有可玩性的，比如自定义域名、add-ons(插件)可以运行比如定时任务等(需要信用卡)等。真是的情况可以自行探索。\n","source":"_posts/Tool/gearhost.md","raw":"---\ntitle: 免费服务器 GearHost\ntags: GearHost\n# toc: true\nkeywords: GearHost 免费服务器\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost.png'\ncategories:\n  - Tool\nabbrlink: '7e709356'\ncomments: true\n---\n\n### 自己做了个小网站想发布到线上，但是没有服务器？\n\n上线还需要域名备案？太麻烦了吧。今天上干货，分享一个永久免费服务器的申请以及使用教程，满足展示、测试、学习等基本需求。\n\n#### 什么是 GearHost\n\nGearHost，它是国外一家主机商，提供免费和付费的主机套餐，支持 PHP、.Net 和 Node.js 程序。无需信用卡，注册就可以免费部署 100 个免费的网站和数据库。\n\n<!-- more -->\n\n### 首先，注册。\n\n这个注册也是不需要信用卡的，注册的其他事项就不啰嗦了，正常进行就好。\n\n### 第二步，创建一个实例。\n\n进入网站后醒目的 Add Cloudsite 按钮你应该看得到，点击后输入一个自定义二级域名，再点击创建等待一会就能完成，成功后会出现在列表里面，点击进入可以看到实例的一些信息。![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost02.png)\n\n### 第三步，部署实例。\n\nGearHost 提供三种部署方案，FTP 方式：这个比较简单，FTP 软件用户名和密码登陆，将部署文件直接拉到服务器文件夹里就可以了。开发软件方式：需要下载对应的部署插件，不推荐。连接 github 库的方式，个人推荐这种，方便。\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost04.png)\n\n最后，部署完成就可以访问你的网站了（在 overview 里面找到 PREVIEW URL），这个就是访问地址。\n\n### 总结\n\nGearHost 的优点是免费，无需信用卡，建站数量多，但是缺点也很明显，主机容量只有 100MB，免费的 Mysql 数据库只有 5Mb，MongoDB10Mb 内存是 256MB，CPU 占用为 5%，不支持 ssl 等等。个人认为相比较国内而言 GearHost 算是一个很不错的练手工具，毕竟国内根本不存在这样良心的厂商，毕竟免费还能运行 PHP、.Net 或者 Node.js。另外这个网站的实例还是比较有可玩性的，比如自定义域名、add-ons(插件)可以运行比如定时任务等(需要信用卡)等。真是的情况可以自行探索。\n","slug":"Tool/gearhost","published":1,"date":"2020-06-03T09:39:26.807Z","updated":"2020-06-03T09:39:26.810Z","layout":"post","photos":[],"link":"","_id":"ckaz5svpq00003iwldcjvfm6q","content":"<h3 id=\"自己做了个小网站想发布到线上，但是没有服务器？\"><a href=\"#自己做了个小网站想发布到线上，但是没有服务器？\" class=\"headerlink\" title=\"自己做了个小网站想发布到线上，但是没有服务器？\"></a>自己做了个小网站想发布到线上，但是没有服务器？</h3><p>上线还需要域名备案？太麻烦了吧。今天上干货，分享一个永久免费服务器的申请以及使用教程，满足展示、测试、学习等基本需求。</p>\n<h4 id=\"什么是-GearHost\"><a href=\"#什么是-GearHost\" class=\"headerlink\" title=\"什么是 GearHost\"></a>什么是 GearHost</h4><p>GearHost，它是国外一家主机商，提供免费和付费的主机套餐，支持 PHP、.Net 和 Node.js 程序。无需信用卡，注册就可以免费部署 100 个免费的网站和数据库。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"首先，注册。\"><a href=\"#首先，注册。\" class=\"headerlink\" title=\"首先，注册。\"></a>首先，注册。</h3><p>这个注册也是不需要信用卡的，注册的其他事项就不啰嗦了，正常进行就好。</p>\n<h3 id=\"第二步，创建一个实例。\"><a href=\"#第二步，创建一个实例。\" class=\"headerlink\" title=\"第二步，创建一个实例。\"></a>第二步，创建一个实例。</h3><p>进入网站后醒目的 Add Cloudsite 按钮你应该看得到，点击后输入一个自定义二级域名，再点击创建等待一会就能完成，成功后会出现在列表里面，点击进入可以看到实例的一些信息。<img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost02.png\" alt=\"\"></p>\n<h3 id=\"第三步，部署实例。\"><a href=\"#第三步，部署实例。\" class=\"headerlink\" title=\"第三步，部署实例。\"></a>第三步，部署实例。</h3><p>GearHost 提供三种部署方案，FTP 方式：这个比较简单，FTP 软件用户名和密码登陆，将部署文件直接拉到服务器文件夹里就可以了。开发软件方式：需要下载对应的部署插件，不推荐。连接 github 库的方式，个人推荐这种，方便。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost04.png\" alt=\"\"></p>\n<p>最后，部署完成就可以访问你的网站了（在 overview 里面找到 PREVIEW URL），这个就是访问地址。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>GearHost 的优点是免费，无需信用卡，建站数量多，但是缺点也很明显，主机容量只有 100MB，免费的 Mysql 数据库只有 5Mb，MongoDB10Mb 内存是 256MB，CPU 占用为 5%，不支持 ssl 等等。个人认为相比较国内而言 GearHost 算是一个很不错的练手工具，毕竟国内根本不存在这样良心的厂商，毕竟免费还能运行 PHP、.Net 或者 Node.js。另外这个网站的实例还是比较有可玩性的，比如自定义域名、add-ons(插件)可以运行比如定时任务等(需要信用卡)等。真是的情况可以自行探索。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"自己做了个小网站想发布到线上，但是没有服务器？\"><a href=\"#自己做了个小网站想发布到线上，但是没有服务器？\" class=\"headerlink\" title=\"自己做了个小网站想发布到线上，但是没有服务器？\"></a>自己做了个小网站想发布到线上，但是没有服务器？</h3><p>上线还需要域名备案？太麻烦了吧。今天上干货，分享一个永久免费服务器的申请以及使用教程，满足展示、测试、学习等基本需求。</p>\n<h4 id=\"什么是-GearHost\"><a href=\"#什么是-GearHost\" class=\"headerlink\" title=\"什么是 GearHost\"></a>什么是 GearHost</h4><p>GearHost，它是国外一家主机商，提供免费和付费的主机套餐，支持 PHP、.Net 和 Node.js 程序。无需信用卡，注册就可以免费部署 100 个免费的网站和数据库。</p>","more":"<h3 id=\"首先，注册。\"><a href=\"#首先，注册。\" class=\"headerlink\" title=\"首先，注册。\"></a>首先，注册。</h3><p>这个注册也是不需要信用卡的，注册的其他事项就不啰嗦了，正常进行就好。</p>\n<h3 id=\"第二步，创建一个实例。\"><a href=\"#第二步，创建一个实例。\" class=\"headerlink\" title=\"第二步，创建一个实例。\"></a>第二步，创建一个实例。</h3><p>进入网站后醒目的 Add Cloudsite 按钮你应该看得到，点击后输入一个自定义二级域名，再点击创建等待一会就能完成，成功后会出现在列表里面，点击进入可以看到实例的一些信息。<img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost02.png\" alt=\"\"></p>\n<h3 id=\"第三步，部署实例。\"><a href=\"#第三步，部署实例。\" class=\"headerlink\" title=\"第三步，部署实例。\"></a>第三步，部署实例。</h3><p>GearHost 提供三种部署方案，FTP 方式：这个比较简单，FTP 软件用户名和密码登陆，将部署文件直接拉到服务器文件夹里就可以了。开发软件方式：需要下载对应的部署插件，不推荐。连接 github 库的方式，个人推荐这种，方便。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/gearhost04.png\" alt=\"\"></p>\n<p>最后，部署完成就可以访问你的网站了（在 overview 里面找到 PREVIEW URL），这个就是访问地址。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>GearHost 的优点是免费，无需信用卡，建站数量多，但是缺点也很明显，主机容量只有 100MB，免费的 Mysql 数据库只有 5Mb，MongoDB10Mb 内存是 256MB，CPU 占用为 5%，不支持 ssl 等等。个人认为相比较国内而言 GearHost 算是一个很不错的练手工具，毕竟国内根本不存在这样良心的厂商，毕竟免费还能运行 PHP、.Net 或者 Node.js。另外这个网站的实例还是比较有可玩性的，比如自定义域名、add-ons(插件)可以运行比如定时任务等(需要信用卡)等。真是的情况可以自行探索。</p>"},{"title":"免费服务器 Heroku","keywords":"Heroku 免费服务器","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku.jpeg","abbrlink":"7e7093535","comments":1,"_content":"\n#### 什么是 Heroku\n\nheroku 是一个云服务商，它提供的免费实例可以用于构建个人网站，非常适用于实验性质或是其他简单的小型系统。比如如果你有 onedrive 的话还可以打造自己的私人资源站，速度比某盘要快很多。废话不多说，放教程。\n\n<!-- more -->\n\n### 首先，注册。\n\n这个注册也是不需要信用卡的，但是要注意一些事项，第一用谷歌邮箱，国内 qq 邮箱等无法注册成功。第二，需要梯子。注册的其他事项就不啰嗦了，正常进行就好。\n\n### 第二步，创建一个实例。\n\n登陆(最近登陆也需要梯子了，有点麻烦)进去之后会看到一个 new 的按钮，点击新增，输入自己的 app 名字，选择实例区域，只有美国和欧洲可选。之后点击 creat app，等待一会创建完成。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku02.png)\n\n### 第三步，部署实例。\n\nheroku 同样提供三种方式的部署方式，Heroku CLI 的方式：需要单独下砸一个软件，但是这个客户端集创建应用与代码管理与一体方便是方便，就是一开始比较麻烦，需要学习成本。还有一种通过 github 关联仓库的方式，首先要先管理 github 账号，点击右上角用户头型，进入账号管理，applications 选项卡里面对你的 github 账号进行关联。在 deploy 选项卡里选择 github 方式进行部署，在输入框输入你的项目名称点击搜索会找到你 git 仓库里面的对应项目,点击 connect，关联成功后点击 deploy branch(发布分支)，等待成功就好了。如果没有部署成功可以参考官方实例 GitHub https://github.com/heroku/node-js-getting-started\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku04.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku05.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku06.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku07.png) 最后，可以在实例详情页面看到打开访问链接，还可以在线查看日志。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku08.png)\n\n### 总结\n\n注册需要梯子，Heroku 优点支持语言众多例如 Ruby, Node.js, Clojure, Java, Python，Go 等主流开发语言，运行内存 512M 还可以，一个账号只能申请 5 个免费的实例，且月在线时长有限制没有信用卡验证的用户 550 小时，验证过的 1000 小时，30 分钟无访问后会进入休眠状态。对于个人用户而言基本够用。\n","source":"_posts/Tool/heroku.md","raw":"---\ntitle: 免费服务器 Heroku\ntags: Heroku\n# toc: true\nkeywords: Heroku 免费服务器\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku.jpeg'\ncategories:\n  - Tool\nabbrlink: '7e7093535'\ncomments: true\n---\n\n#### 什么是 Heroku\n\nheroku 是一个云服务商，它提供的免费实例可以用于构建个人网站，非常适用于实验性质或是其他简单的小型系统。比如如果你有 onedrive 的话还可以打造自己的私人资源站，速度比某盘要快很多。废话不多说，放教程。\n\n<!-- more -->\n\n### 首先，注册。\n\n这个注册也是不需要信用卡的，但是要注意一些事项，第一用谷歌邮箱，国内 qq 邮箱等无法注册成功。第二，需要梯子。注册的其他事项就不啰嗦了，正常进行就好。\n\n### 第二步，创建一个实例。\n\n登陆(最近登陆也需要梯子了，有点麻烦)进去之后会看到一个 new 的按钮，点击新增，输入自己的 app 名字，选择实例区域，只有美国和欧洲可选。之后点击 creat app，等待一会创建完成。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku02.png)\n\n### 第三步，部署实例。\n\nheroku 同样提供三种方式的部署方式，Heroku CLI 的方式：需要单独下砸一个软件，但是这个客户端集创建应用与代码管理与一体方便是方便，就是一开始比较麻烦，需要学习成本。还有一种通过 github 关联仓库的方式，首先要先管理 github 账号，点击右上角用户头型，进入账号管理，applications 选项卡里面对你的 github 账号进行关联。在 deploy 选项卡里选择 github 方式进行部署，在输入框输入你的项目名称点击搜索会找到你 git 仓库里面的对应项目,点击 connect，关联成功后点击 deploy branch(发布分支)，等待成功就好了。如果没有部署成功可以参考官方实例 GitHub https://github.com/heroku/node-js-getting-started\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku04.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku05.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku06.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku07.png) 最后，可以在实例详情页面看到打开访问链接，还可以在线查看日志。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku08.png)\n\n### 总结\n\n注册需要梯子，Heroku 优点支持语言众多例如 Ruby, Node.js, Clojure, Java, Python，Go 等主流开发语言，运行内存 512M 还可以，一个账号只能申请 5 个免费的实例，且月在线时长有限制没有信用卡验证的用户 550 小时，验证过的 1000 小时，30 分钟无访问后会进入休眠状态。对于个人用户而言基本够用。\n","slug":"Tool/heroku","published":1,"date":"2020-06-03T09:39:30.356Z","updated":"2020-06-03T09:39:30.357Z","layout":"post","photos":[],"link":"","_id":"ckaz5syec00033iwl10xsghi5","content":"<h4 id=\"什么是-Heroku\"><a href=\"#什么是-Heroku\" class=\"headerlink\" title=\"什么是 Heroku\"></a>什么是 Heroku</h4><p>heroku 是一个云服务商，它提供的免费实例可以用于构建个人网站，非常适用于实验性质或是其他简单的小型系统。比如如果你有 onedrive 的话还可以打造自己的私人资源站，速度比某盘要快很多。废话不多说，放教程。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"首先，注册。\"><a href=\"#首先，注册。\" class=\"headerlink\" title=\"首先，注册。\"></a>首先，注册。</h3><p>这个注册也是不需要信用卡的，但是要注意一些事项，第一用谷歌邮箱，国内 qq 邮箱等无法注册成功。第二，需要梯子。注册的其他事项就不啰嗦了，正常进行就好。</p>\n<h3 id=\"第二步，创建一个实例。\"><a href=\"#第二步，创建一个实例。\" class=\"headerlink\" title=\"第二步，创建一个实例。\"></a>第二步，创建一个实例。</h3><p>登陆(最近登陆也需要梯子了，有点麻烦)进去之后会看到一个 new 的按钮，点击新增，输入自己的 app 名字，选择实例区域，只有美国和欧洲可选。之后点击 creat app，等待一会创建完成。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku02.png\" alt=\"\"></p>\n<h3 id=\"第三步，部署实例。\"><a href=\"#第三步，部署实例。\" class=\"headerlink\" title=\"第三步，部署实例。\"></a>第三步，部署实例。</h3><p>heroku 同样提供三种方式的部署方式，Heroku CLI 的方式：需要单独下砸一个软件，但是这个客户端集创建应用与代码管理与一体方便是方便，就是一开始比较麻烦，需要学习成本。还有一种通过 github 关联仓库的方式，首先要先管理 github 账号，点击右上角用户头型，进入账号管理，applications 选项卡里面对你的 github 账号进行关联。在 deploy 选项卡里选择 github 方式进行部署，在输入框输入你的项目名称点击搜索会找到你 git 仓库里面的对应项目,点击 connect，关联成功后点击 deploy branch(发布分支)，等待成功就好了。如果没有部署成功可以参考官方实例 GitHub <a href=\"https://github.com/heroku/node-js-getting-started\">https://github.com/heroku/node-js-getting-started</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku04.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku05.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku06.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku07.png\" alt=\"\"> 最后，可以在实例详情页面看到打开访问链接，还可以在线查看日志。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku08.png\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>注册需要梯子，Heroku 优点支持语言众多例如 Ruby, Node.js, Clojure, Java, Python，Go 等主流开发语言，运行内存 512M 还可以，一个账号只能申请 5 个免费的实例，且月在线时长有限制没有信用卡验证的用户 550 小时，验证过的 1000 小时，30 分钟无访问后会进入休眠状态。对于个人用户而言基本够用。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"什么是-Heroku\"><a href=\"#什么是-Heroku\" class=\"headerlink\" title=\"什么是 Heroku\"></a>什么是 Heroku</h4><p>heroku 是一个云服务商，它提供的免费实例可以用于构建个人网站，非常适用于实验性质或是其他简单的小型系统。比如如果你有 onedrive 的话还可以打造自己的私人资源站，速度比某盘要快很多。废话不多说，放教程。</p>","more":"<h3 id=\"首先，注册。\"><a href=\"#首先，注册。\" class=\"headerlink\" title=\"首先，注册。\"></a>首先，注册。</h3><p>这个注册也是不需要信用卡的，但是要注意一些事项，第一用谷歌邮箱，国内 qq 邮箱等无法注册成功。第二，需要梯子。注册的其他事项就不啰嗦了，正常进行就好。</p>\n<h3 id=\"第二步，创建一个实例。\"><a href=\"#第二步，创建一个实例。\" class=\"headerlink\" title=\"第二步，创建一个实例。\"></a>第二步，创建一个实例。</h3><p>登陆(最近登陆也需要梯子了，有点麻烦)进去之后会看到一个 new 的按钮，点击新增，输入自己的 app 名字，选择实例区域，只有美国和欧洲可选。之后点击 creat app，等待一会创建完成。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku02.png\" alt=\"\"></p>\n<h3 id=\"第三步，部署实例。\"><a href=\"#第三步，部署实例。\" class=\"headerlink\" title=\"第三步，部署实例。\"></a>第三步，部署实例。</h3><p>heroku 同样提供三种方式的部署方式，Heroku CLI 的方式：需要单独下砸一个软件，但是这个客户端集创建应用与代码管理与一体方便是方便，就是一开始比较麻烦，需要学习成本。还有一种通过 github 关联仓库的方式，首先要先管理 github 账号，点击右上角用户头型，进入账号管理，applications 选项卡里面对你的 github 账号进行关联。在 deploy 选项卡里选择 github 方式进行部署，在输入框输入你的项目名称点击搜索会找到你 git 仓库里面的对应项目,点击 connect，关联成功后点击 deploy branch(发布分支)，等待成功就好了。如果没有部署成功可以参考官方实例 GitHub <a href=\"https://github.com/heroku/node-js-getting-started\">https://github.com/heroku/node-js-getting-started</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku04.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku05.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku06.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku07.png\" alt=\"\"> 最后，可以在实例详情页面看到打开访问链接，还可以在线查看日志。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/heroku08.png\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>注册需要梯子，Heroku 优点支持语言众多例如 Ruby, Node.js, Clojure, Java, Python，Go 等主流开发语言，运行内存 512M 还可以，一个账号只能申请 5 个免费的实例，且月在线时长有限制没有信用卡验证的用户 550 小时，验证过的 1000 小时，30 分钟无访问后会进入休眠状态。对于个人用户而言基本够用。</p>"},{"title":"免费服务器 路由端口映射","keywords":"路由端口映射 免费服务器","thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/iptans.jpg","abbrlink":"7e709354","comments":1,"_content":"\n### 上线还需要域名备案？\n\n分享一个路由端口映射，搭建永久个人免费服务器使用教程，满足展示、测试、展示等需求。\n\n### 什么是端口映射\n\n端口映射又称端口转发、NAT、虚拟服务器。就是外网访问内网通过端口映射的方式。\n\n<!-- more -->\n\n### 首先，固定 ip 的宽带。\n\n首先，你拥有一个固定 ip 的宽带，不过没有也没关系可以查看当前路由器的外网地址，比如登陆到路由器查看，还可以用 360 网络测速查看，还有一种更方便的打开网页 iP 地址：https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip02.png)\n\n### 第二步，设置路由器端口转发。\n\n登陆路由器找到 Tp-link 路由器：点击【转发规则】——【虚拟服务器】——【添加新条目】；D-link 路由器：点击【进阶设定】—【虚拟服务器】进行设置，先点【激活】，才可设置；小米路由器：入管理界面后，点击【高级设置】——【端口转发】———【添加规则】；还有的路由器的这个功能是单独在应用程序里面的。但是不管那种路由器都是先找到虚拟服务器，然后添加转发规则。添加指导：常用服务器选择 http；外部端口任意，避开常用的端口；内部端口就是你内网服务器的端口，我们都以 8088 为例（我的本机服务会在这个端口启动）；IP 地址填写自己内网 ip 地址（不知道的去自己网络中心查看）；协议类型选择 ALL；点击保存，一天端口转发规则就设置好了。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip04.png)\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip05.png)\n\n### 第三步，固定本机内网 ip。\n\nmac 下打开网络偏好设置-高级-TCP/P 配置 ipv4 为手动，然后手动填写一个内网 ip 应用成功后可使用。windows 打开电脑的“网络和共享中心”，在“Internet 协议版本 4 属性”对话框中，选中“使用下面的 ip 地址”项目，然后输入 ip 地址，请注意设定的 ip 地址是否合理有效。还有一种方式就是在路由器中将“你要的内网 ip”与网卡 mac 地址绑定。\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip06.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip07.png)\n\n### 最后，启动本地服务器\n\n外网环境通过 223.94.56.100:8088 这个地址就访问当前的本地服务了，这样一个基于路由器的内网穿透就成功了。这种方式的穿透速度还是可以的，还有就是很方便的将自己的作品像别人展示，缺点是如果没有固定 ip 每次的访问地址都会变。\n","source":"_posts/Tool/ippenetrate.md","raw":"---\ntitle: 免费服务器 路由端口映射\ntags: 路由端口映射\n# toc: true\nkeywords: 路由端口映射 免费服务器\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/iptans.jpg'\ncategories:\n  - Tool\nabbrlink: '7e709354'\ncomments: true\n---\n\n### 上线还需要域名备案？\n\n分享一个路由端口映射，搭建永久个人免费服务器使用教程，满足展示、测试、展示等需求。\n\n### 什么是端口映射\n\n端口映射又称端口转发、NAT、虚拟服务器。就是外网访问内网通过端口映射的方式。\n\n<!-- more -->\n\n### 首先，固定 ip 的宽带。\n\n首先，你拥有一个固定 ip 的宽带，不过没有也没关系可以查看当前路由器的外网地址，比如登陆到路由器查看，还可以用 360 网络测速查看，还有一种更方便的打开网页 iP 地址：https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip01.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip02.png)\n\n### 第二步，设置路由器端口转发。\n\n登陆路由器找到 Tp-link 路由器：点击【转发规则】——【虚拟服务器】——【添加新条目】；D-link 路由器：点击【进阶设定】—【虚拟服务器】进行设置，先点【激活】，才可设置；小米路由器：入管理界面后，点击【高级设置】——【端口转发】———【添加规则】；还有的路由器的这个功能是单独在应用程序里面的。但是不管那种路由器都是先找到虚拟服务器，然后添加转发规则。添加指导：常用服务器选择 http；外部端口任意，避开常用的端口；内部端口就是你内网服务器的端口，我们都以 8088 为例（我的本机服务会在这个端口启动）；IP 地址填写自己内网 ip 地址（不知道的去自己网络中心查看）；协议类型选择 ALL；点击保存，一天端口转发规则就设置好了。 ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip04.png)\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip05.png)\n\n### 第三步，固定本机内网 ip。\n\nmac 下打开网络偏好设置-高级-TCP/P 配置 ipv4 为手动，然后手动填写一个内网 ip 应用成功后可使用。windows 打开电脑的“网络和共享中心”，在“Internet 协议版本 4 属性”对话框中，选中“使用下面的 ip 地址”项目，然后输入 ip 地址，请注意设定的 ip 地址是否合理有效。还有一种方式就是在路由器中将“你要的内网 ip”与网卡 mac 地址绑定。\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip03.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip06.png) ![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip07.png)\n\n### 最后，启动本地服务器\n\n外网环境通过 223.94.56.100:8088 这个地址就访问当前的本地服务了，这样一个基于路由器的内网穿透就成功了。这种方式的穿透速度还是可以的，还有就是很方便的将自己的作品像别人展示，缺点是如果没有固定 ip 每次的访问地址都会变。\n","slug":"Tool/ippenetrate","published":1,"date":"2020-06-03T09:39:33.964Z","updated":"2020-06-03T09:41:38.328Z","_id":"ckaz5t16k00063iwl0e2afiud","layout":"post","photos":[],"link":"","content":"<h3 id=\"上线还需要域名备案？\"><a href=\"#上线还需要域名备案？\" class=\"headerlink\" title=\"上线还需要域名备案？\"></a>上线还需要域名备案？</h3><p>分享一个路由端口映射，搭建永久个人免费服务器使用教程，满足展示、测试、展示等需求。</p>\n<h3 id=\"什么是端口映射\"><a href=\"#什么是端口映射\" class=\"headerlink\" title=\"什么是端口映射\"></a>什么是端口映射</h3><p>端口映射又称端口转发、NAT、虚拟服务器。就是外网访问内网通过端口映射的方式。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"首先，固定-ip-的宽带。\"><a href=\"#首先，固定-ip-的宽带。\" class=\"headerlink\" title=\"首先，固定 ip 的宽带。\"></a>首先，固定 ip 的宽带。</h3><p>首先，你拥有一个固定 ip 的宽带，不过没有也没关系可以查看当前路由器的外网地址，比如登陆到路由器查看，还可以用 360 网络测速查看，还有一种更方便的打开网页 iP 地址：<a href=\"https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。\">https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。</a> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip02.png\" alt=\"\"></p>\n<h3 id=\"第二步，设置路由器端口转发。\"><a href=\"#第二步，设置路由器端口转发。\" class=\"headerlink\" title=\"第二步，设置路由器端口转发。\"></a>第二步，设置路由器端口转发。</h3><p>登陆路由器找到 Tp-link 路由器：点击【转发规则】——【虚拟服务器】——【添加新条目】；D-link 路由器：点击【进阶设定】—【虚拟服务器】进行设置，先点【激活】，才可设置；小米路由器：入管理界面后，点击【高级设置】——【端口转发】———【添加规则】；还有的路由器的这个功能是单独在应用程序里面的。但是不管那种路由器都是先找到虚拟服务器，然后添加转发规则。添加指导：常用服务器选择 http；外部端口任意，避开常用的端口；内部端口就是你内网服务器的端口，我们都以 8088 为例（我的本机服务会在这个端口启动）；IP 地址填写自己内网 ip 地址（不知道的去自己网络中心查看）；协议类型选择 ALL；点击保存，一天端口转发规则就设置好了。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip04.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip05.png\" alt=\"\"></p>\n<h3 id=\"第三步，固定本机内网-ip。\"><a href=\"#第三步，固定本机内网-ip。\" class=\"headerlink\" title=\"第三步，固定本机内网 ip。\"></a>第三步，固定本机内网 ip。</h3><p>mac 下打开网络偏好设置-高级-TCP/P 配置 ipv4 为手动，然后手动填写一个内网 ip 应用成功后可使用。windows 打开电脑的“网络和共享中心”，在“Internet 协议版本 4 属性”对话框中，选中“使用下面的 ip 地址”项目，然后输入 ip 地址，请注意设定的 ip 地址是否合理有效。还有一种方式就是在路由器中将“你要的内网 ip”与网卡 mac 地址绑定。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip06.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip07.png\" alt=\"\"></p>\n<h3 id=\"最后，启动本地服务器\"><a href=\"#最后，启动本地服务器\" class=\"headerlink\" title=\"最后，启动本地服务器\"></a>最后，启动本地服务器</h3><p>外网环境通过 223.94.56.100:8088 这个地址就访问当前的本地服务了，这样一个基于路由器的内网穿透就成功了。这种方式的穿透速度还是可以的，还有就是很方便的将自己的作品像别人展示，缺点是如果没有固定 ip 每次的访问地址都会变。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"上线还需要域名备案？\"><a href=\"#上线还需要域名备案？\" class=\"headerlink\" title=\"上线还需要域名备案？\"></a>上线还需要域名备案？</h3><p>分享一个路由端口映射，搭建永久个人免费服务器使用教程，满足展示、测试、展示等需求。</p>\n<h3 id=\"什么是端口映射\"><a href=\"#什么是端口映射\" class=\"headerlink\" title=\"什么是端口映射\"></a>什么是端口映射</h3><p>端口映射又称端口转发、NAT、虚拟服务器。就是外网访问内网通过端口映射的方式。</p>","more":"<h3 id=\"首先，固定-ip-的宽带。\"><a href=\"#首先，固定-ip-的宽带。\" class=\"headerlink\" title=\"首先，固定 ip 的宽带。\"></a>首先，固定 ip 的宽带。</h3><p>首先，你拥有一个固定 ip 的宽带，不过没有也没关系可以查看当前路由器的外网地址，比如登陆到路由器查看，还可以用 360 网络测速查看，还有一种更方便的打开网页 iP 地址：<a href=\"https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。\">https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。</a> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip01.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip02.png\" alt=\"\"></p>\n<h3 id=\"第二步，设置路由器端口转发。\"><a href=\"#第二步，设置路由器端口转发。\" class=\"headerlink\" title=\"第二步，设置路由器端口转发。\"></a>第二步，设置路由器端口转发。</h3><p>登陆路由器找到 Tp-link 路由器：点击【转发规则】——【虚拟服务器】——【添加新条目】；D-link 路由器：点击【进阶设定】—【虚拟服务器】进行设置，先点【激活】，才可设置；小米路由器：入管理界面后，点击【高级设置】——【端口转发】———【添加规则】；还有的路由器的这个功能是单独在应用程序里面的。但是不管那种路由器都是先找到虚拟服务器，然后添加转发规则。添加指导：常用服务器选择 http；外部端口任意，避开常用的端口；内部端口就是你内网服务器的端口，我们都以 8088 为例（我的本机服务会在这个端口启动）；IP 地址填写自己内网 ip 地址（不知道的去自己网络中心查看）；协议类型选择 ALL；点击保存，一天端口转发规则就设置好了。 <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip04.png\" alt=\"\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip05.png\" alt=\"\"></p>\n<h3 id=\"第三步，固定本机内网-ip。\"><a href=\"#第三步，固定本机内网-ip。\" class=\"headerlink\" title=\"第三步，固定本机内网 ip。\"></a>第三步，固定本机内网 ip。</h3><p>mac 下打开网络偏好设置-高级-TCP/P 配置 ipv4 为手动，然后手动填写一个内网 ip 应用成功后可使用。windows 打开电脑的“网络和共享中心”，在“Internet 协议版本 4 属性”对话框中，选中“使用下面的 ip 地址”项目，然后输入 ip 地址，请注意设定的 ip 地址是否合理有效。还有一种方式就是在路由器中将“你要的内网 ip”与网卡 mac 地址绑定。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip03.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip06.png\" alt=\"\"> <img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.4/image/tool/webip07.png\" alt=\"\"></p>\n<h3 id=\"最后，启动本地服务器\"><a href=\"#最后，启动本地服务器\" class=\"headerlink\" title=\"最后，启动本地服务器\"></a>最后，启动本地服务器</h3><p>外网环境通过 223.94.56.100:8088 这个地址就访问当前的本地服务了，这样一个基于路由器的内网穿透就成功了。这种方式的穿透速度还是可以的，还有就是很方便的将自己的作品像别人展示，缺点是如果没有固定 ip 每次的访问地址都会变。</p>"},{"title":"二维码生成器","comments":1,"thumbnail":"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/wap.png","_content":"\n<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>网址二维码生成器</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .form-group {\n      display:flex;\n    }\n    .form-group label{\n      line-height:34px;\n      margin:0;\n    }\n    .form-group .form-control{\n      width:66%;\n      margin-right:10px;\n    }\n    .form-group .btn{\n      margin:0px;\n    }\n    .image-box{\n      min-height:350px;\n      text-align:center;\n    }\n    .image-box img{\n      min-width:300px;\n      min-height:300px;\n      height:auto;\n      border:1px solid #ccc;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">二维码生成器</h1>\n    <div class=\"web\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"输入网址\">\n        <button id=\"creatCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div>\n    <div class=\"file-box\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"file\" id=\"file\" accept=\"image/*\" placeholder=\"上传图片\">\n        <button id=\"creatFileCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div> \n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#creatCode\").click(function(){\n      if($('#website').val().length){\n        console.log($('#website').val())\n        getQrcode($('#website').val())\n      }\n    })\n    function getQrcode(url){\n      $.ajax({\n        type: \"post\",\n        url: \"https://webadd.herokuapp.com/qrcode\",\n        data:{url:url,type:1},\n        dataType: \"json\",\n        success: function (data) {\n          $('.web .img').eq(0).attr('src',data.url)\n          $('#website').val('')\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n    $(\"#creatFileCode\").click(function(){\n      var files = $('#file').prop('files');\n      var data = new FormData();\n      data.append('file', files[0]);\n      data.append('type', '2');\n      console.log(data)\n      getFileQrcode(data)\n    })\n    function getFileQrcode(params){\n      $.ajax({\n        type: \"post\",\n        // url: \"http://192.168.1.222:9090/qrcode\",\n        url:\"https://api.2048888.xyz/qrcode\",\n        data:params,\n        cache: false, \n        processData: false, \n        contentType: false, \n        success: function (data) {\n          console.log(data)\n          $('.file-box .img').eq(0).attr('src',data.url)\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n  </script>\n</body>\n\n</html>\n","source":"_posts/Tool/qrcode.md","raw":"---\ntitle: 二维码生成器\ncomments: true\nthumbnail: 'https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/wap.png'\ntags: QRCode\n---\n\n<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>网址二维码生成器</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .form-group {\n      display:flex;\n    }\n    .form-group label{\n      line-height:34px;\n      margin:0;\n    }\n    .form-group .form-control{\n      width:66%;\n      margin-right:10px;\n    }\n    .form-group .btn{\n      margin:0px;\n    }\n    .image-box{\n      min-height:350px;\n      text-align:center;\n    }\n    .image-box img{\n      min-width:300px;\n      min-height:300px;\n      height:auto;\n      border:1px solid #ccc;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">二维码生成器</h1>\n    <div class=\"web\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"输入网址\">\n        <button id=\"creatCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div>\n    <div class=\"file-box\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"file\" id=\"file\" accept=\"image/*\" placeholder=\"上传图片\">\n        <button id=\"creatFileCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div> \n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#creatCode\").click(function(){\n      if($('#website').val().length){\n        console.log($('#website').val())\n        getQrcode($('#website').val())\n      }\n    })\n    function getQrcode(url){\n      $.ajax({\n        type: \"post\",\n        url: \"https://webadd.herokuapp.com/qrcode\",\n        data:{url:url,type:1},\n        dataType: \"json\",\n        success: function (data) {\n          $('.web .img').eq(0).attr('src',data.url)\n          $('#website').val('')\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n    $(\"#creatFileCode\").click(function(){\n      var files = $('#file').prop('files');\n      var data = new FormData();\n      data.append('file', files[0]);\n      data.append('type', '2');\n      console.log(data)\n      getFileQrcode(data)\n    })\n    function getFileQrcode(params){\n      $.ajax({\n        type: \"post\",\n        // url: \"http://192.168.1.222:9090/qrcode\",\n        url:\"https://api.2048888.xyz/qrcode\",\n        data:params,\n        cache: false, \n        processData: false, \n        contentType: false, \n        success: function (data) {\n          console.log(data)\n          $('.file-box .img').eq(0).attr('src',data.url)\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n  </script>\n</body>\n\n</html>\n","slug":"Tool/qrcode","published":1,"date":"2020-06-03T09:42:12.702Z","updated":"2020-07-24T10:28:13.606Z","_id":"ckaz5wfpc000e3iwlabcc0xk4","layout":"post","photos":[],"link":"","content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>网址二维码生成器</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .form-group {\n      display:flex;\n    }\n    .form-group label{\n      line-height:34px;\n      margin:0;\n    }\n    .form-group .form-control{\n      width:66%;\n      margin-right:10px;\n    }\n    .form-group .btn{\n      margin:0px;\n    }\n    .image-box{\n      min-height:350px;\n      text-align:center;\n    }\n    .image-box img{\n      min-width:300px;\n      min-height:300px;\n      height:auto;\n      border:1px solid #ccc;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">二维码生成器</h1>\n    <div class=\"web\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"输入网址\">\n        <button id=\"creatCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div>\n    <div class=\"file-box\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"file\" id=\"file\" accept=\"image/*\" placeholder=\"上传图片\">\n        <button id=\"creatFileCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div> \n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#creatCode\").click(function(){\n      if($('#website').val().length){\n        console.log($('#website').val())\n        getQrcode($('#website').val())\n      }\n    })\n    function getQrcode(url){\n      $.ajax({\n        type: \"post\",\n        url: \"https://webadd.herokuapp.com/qrcode\",\n        data:{url:url,type:1},\n        dataType: \"json\",\n        success: function (data) {\n          $('.web .img').eq(0).attr('src',data.url)\n          $('#website').val('')\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n    $(\"#creatFileCode\").click(function(){\n      var files = $('#file').prop('files');\n      var data = new FormData();\n      data.append('file', files[0]);\n      data.append('type', '2');\n      console.log(data)\n      getFileQrcode(data)\n    })\n    function getFileQrcode(params){\n      $.ajax({\n        type: \"post\",\n        // url: \"http://192.168.1.222:9090/qrcode\",\n        url:\"https://api.2048888.xyz/qrcode\",\n        data:params,\n        cache: false, \n        processData: false, \n        contentType: false, \n        success: function (data) {\n          console.log(data)\n          $('.file-box .img').eq(0).attr('src',data.url)\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n  </script>\n</body>\n\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\" />\n  <title>网址二维码生成器</title>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/css/bootstrap.min.css\">\n  <style>\n    .container{\n      width:100%;\n    }\n    .form-group {\n      display:flex;\n    }\n    .form-group label{\n      line-height:34px;\n      margin:0;\n    }\n    .form-group .form-control{\n      width:66%;\n      margin-right:10px;\n    }\n    .form-group .btn{\n      margin:0px;\n    }\n    .image-box{\n      min-height:350px;\n      text-align:center;\n    }\n    .image-box img{\n      min-width:300px;\n      min-height:300px;\n      height:auto;\n      border:1px solid #ccc;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center\">二维码生成器</h1>\n    <div class=\"web\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"text\" class=\"form-control\" id=\"website\" placeholder=\"输入网址\">\n        <button id=\"creatCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div>\n    <div class=\"file-box\">\n      <div class=\"form-group\">\n        <label for=\"website\">网 址：</label>\n        <input type=\"file\" id=\"file\" accept=\"image/*\" placeholder=\"上传图片\">\n        <button id=\"creatFileCode\" class=\"btn btn-primary\">确认</button> \n      </div>\n      <div class=\"image-box\">\n        <img src=\"\" class=\"img\" alt=\"生成的二维码\">\n      </div> \n    </div> \n  </div>\n  <script src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.2/js/jquery-1.11.1.min.js\"></script>\n  <script>\n    $(\"#creatCode\").click(function(){\n      if($('#website').val().length){\n        console.log($('#website').val())\n        getQrcode($('#website').val())\n      }\n    })\n    function getQrcode(url){\n      $.ajax({\n        type: \"post\",\n        url: \"https://webadd.herokuapp.com/qrcode\",\n        data:{url:url,type:1},\n        dataType: \"json\",\n        success: function (data) {\n          $('.web .img').eq(0).attr('src',data.url)\n          $('#website').val('')\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n    $(\"#creatFileCode\").click(function(){\n      var files = $('#file').prop('files');\n      var data = new FormData();\n      data.append('file', files[0]);\n      data.append('type', '2');\n      console.log(data)\n      getFileQrcode(data)\n    })\n    function getFileQrcode(params){\n      $.ajax({\n        type: \"post\",\n        // url: \"http://192.168.1.222:9090/qrcode\",\n        url:\"https://api.2048888.xyz/qrcode\",\n        data:params,\n        cache: false, \n        processData: false, \n        contentType: false, \n        success: function (data) {\n          console.log(data)\n          $('.file-box .img').eq(0).attr('src',data.url)\n        },\n        error: function (err) {\n          console.log(err)\n        }\n      })\n    }\n  </script>\n</body>\n\n</html>\n"},{"title":"免费VPN  L2TP方式,mac和ios 配置方式","keywords":"VPN L2TP mac和ios 科学上网","thumbnail":"https://i.loli.net/2020/07/24/6kYcu3ml5XoI1xE.jpg","comments":1,"_content":"\n#### 教你免费科学上网\n\n无需安装额外工具，L2TP 方式配置方式，mac 和 ios 通用的翻墙方式，重点是完全免费。\n\n### 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\n\n<!-- more -->\n\n## Mac 端配置\n\n### 第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\n\n### 第二步，点击网络配置屏幕上的 \"+\" 按钮；\n\n![第二步](https://i.loli.net/2020/07/24/jlPDQA496LBnuXS.png)\n\n### 第三步，在 \"Interface\" 选择 \"VPN\"，\"VPN Type\" 选择 \"L2TP/IPsec\" ，服务名称自定义。并点击 \"创建\" 按钮；\n\n![第三步](https://i.loli.net/2020/07/24/hl4x9A1DCfdQVnK.png)\n\n### 第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；\n\n![第四步](https://i.loli.net/2020/07/24/d9s4BMcXHQakGOz.png)\n\n### 第五步，打开认证设置，密码：vpn ,共享密钥：vpn；\n\n![mac4.png](https://i.loli.net/2020/07/24/pi3FV9rvEBk1oqJ.png) ![第五步](https://i.loli.net/2020/07/24/jD8qgBzdYXVAy4T.png)\n\n### 第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\n\n![mac5.png](https://i.loli.net/2020/07/24/MxVifIOamFB653T.png)\n\n## iPhone/ iPad 端配置\n\n### 第一步，设置,找到 vpn；\n\n![IMG_4B9266DCE871-1.jpeg](https://i.loli.net/2020/07/24/yX9FQ15cfZHwAlk.jpg)\n\n### 第二步，添加 VPN 配置\n\n![IMG_1D7A78A9CCBF-1.jpeg](https://i.loli.net/2020/07/24/CqjvQlk9Y45Wmru.jpg)\n\n### 第三步， 类型选择选择 \"L2TP\" ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；\n\n![IMG_55891B4EB4D4-1.jpeg](https://i.loli.net/2020/07/24/AVK7u8DGmtIQaNS.jpg)\n\n### 第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；\n\n![IMG_24A8798784CA-1.jpeg](https://i.loli.net/2020/07/24/4SIzWGFaOTYEiM1.jpg)\n\n### 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\n\n### 所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\n","source":"_posts/Node/vpn_L2TP.md","raw":"---\ntitle: 免费VPN  L2TP方式,mac和ios 配置方式\ntags: VPN L2TP\n# toc: true\nkeywords: VPN L2TP mac和ios 科学上网\nthumbnail: 'https://i.loli.net/2020/07/24/6kYcu3ml5XoI1xE.jpg'\ncategories:\n  - Node\ncomments: true\n---\n\n#### 教你免费科学上网\n\n无需安装额外工具，L2TP 方式配置方式，mac 和 ios 通用的翻墙方式，重点是完全免费。\n\n### 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\n\n<!-- more -->\n\n## Mac 端配置\n\n### 第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\n\n### 第二步，点击网络配置屏幕上的 \"+\" 按钮；\n\n![第二步](https://i.loli.net/2020/07/24/jlPDQA496LBnuXS.png)\n\n### 第三步，在 \"Interface\" 选择 \"VPN\"，\"VPN Type\" 选择 \"L2TP/IPsec\" ，服务名称自定义。并点击 \"创建\" 按钮；\n\n![第三步](https://i.loli.net/2020/07/24/hl4x9A1DCfdQVnK.png)\n\n### 第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；\n\n![第四步](https://i.loli.net/2020/07/24/d9s4BMcXHQakGOz.png)\n\n### 第五步，打开认证设置，密码：vpn ,共享密钥：vpn；\n\n![mac4.png](https://i.loli.net/2020/07/24/pi3FV9rvEBk1oqJ.png) ![第五步](https://i.loli.net/2020/07/24/jD8qgBzdYXVAy4T.png)\n\n### 第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\n\n![mac5.png](https://i.loli.net/2020/07/24/MxVifIOamFB653T.png)\n\n## iPhone/ iPad 端配置\n\n### 第一步，设置,找到 vpn；\n\n![IMG_4B9266DCE871-1.jpeg](https://i.loli.net/2020/07/24/yX9FQ15cfZHwAlk.jpg)\n\n### 第二步，添加 VPN 配置\n\n![IMG_1D7A78A9CCBF-1.jpeg](https://i.loli.net/2020/07/24/CqjvQlk9Y45Wmru.jpg)\n\n### 第三步， 类型选择选择 \"L2TP\" ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；\n\n![IMG_55891B4EB4D4-1.jpeg](https://i.loli.net/2020/07/24/AVK7u8DGmtIQaNS.jpg)\n\n### 第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；\n\n![IMG_24A8798784CA-1.jpeg](https://i.loli.net/2020/07/24/4SIzWGFaOTYEiM1.jpg)\n\n### 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\n\n### 所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\n","slug":"Node/vpn_L2TP","published":1,"date":"2020-07-24T08:36:18.260Z","updated":"2020-07-24T09:35:26.897Z","_id":"ckd0006el0000r1wl3wbr3kb9","layout":"post","photos":[],"link":"","content":"<h4 id=\"教你免费科学上网\"><a href=\"#教你免费科学上网\" class=\"headerlink\" title=\"教你免费科学上网\"></a>教你免费科学上网</h4><p>无需安装额外工具，L2TP 方式配置方式，mac 和 ios 通用的翻墙方式，重点是完全免费。</p>\n<h3 id=\"获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\"><a href=\"#获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\" class=\"headerlink\" title=\"获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\"></a>获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息</h3><a id=\"more\"></a>\n\n<h2 id=\"Mac-端配置\"><a href=\"#Mac-端配置\" class=\"headerlink\" title=\"Mac 端配置\"></a>Mac 端配置</h2><h3 id=\"第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\"><a href=\"#第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\" class=\"headerlink\" title=\"第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\"></a>第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；</h3><h3 id=\"第二步，点击网络配置屏幕上的-“-”-按钮；\"><a href=\"#第二步，点击网络配置屏幕上的-“-”-按钮；\" class=\"headerlink\" title=\"第二步，点击网络配置屏幕上的 “+” 按钮；\"></a>第二步，点击网络配置屏幕上的 “+” 按钮；</h3><p><img src=\"https://i.loli.net/2020/07/24/jlPDQA496LBnuXS.png\" alt=\"第二步\"></p>\n<h3 id=\"第三步，在-“Interface”-选择-“VPN”，”VPN-Type”-选择-“L2TP-IPsec”-，服务名称自定义。并点击-“创建”-按钮；\"><a href=\"#第三步，在-“Interface”-选择-“VPN”，”VPN-Type”-选择-“L2TP-IPsec”-，服务名称自定义。并点击-“创建”-按钮；\" class=\"headerlink\" title=\"第三步，在 “Interface” 选择 “VPN”，”VPN Type” 选择 “L2TP/IPsec” ，服务名称自定义。并点击 “创建” 按钮；\"></a>第三步，在 “Interface” 选择 “VPN”，”VPN Type” 选择 “L2TP/IPsec” ，服务名称自定义。并点击 “创建” 按钮；</h3><p><img src=\"https://i.loli.net/2020/07/24/hl4x9A1DCfdQVnK.png\" alt=\"第三步\"></p>\n<h3 id=\"第四步，填写-vpn-配置-ip-用户名写-vpn（小写）；\"><a href=\"#第四步，填写-vpn-配置-ip-用户名写-vpn（小写）；\" class=\"headerlink\" title=\"第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；\"></a>第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；</h3><p><img src=\"https://i.loli.net/2020/07/24/d9s4BMcXHQakGOz.png\" alt=\"第四步\"></p>\n<h3 id=\"第五步，打开认证设置，密码：vpn-共享密钥：vpn；\"><a href=\"#第五步，打开认证设置，密码：vpn-共享密钥：vpn；\" class=\"headerlink\" title=\"第五步，打开认证设置，密码：vpn ,共享密钥：vpn；\"></a>第五步，打开认证设置，密码：vpn ,共享密钥：vpn；</h3><p><img src=\"https://i.loli.net/2020/07/24/pi3FV9rvEBk1oqJ.png\" alt=\"mac4.png\"> <img src=\"https://i.loli.net/2020/07/24/jD8qgBzdYXVAy4T.png\" alt=\"第五步\"></p>\n<h3 id=\"第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\"><a href=\"#第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\" class=\"headerlink\" title=\"第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\"></a>第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。</h3><p><img src=\"https://i.loli.net/2020/07/24/MxVifIOamFB653T.png\" alt=\"mac5.png\"></p>\n<h2 id=\"iPhone-iPad-端配置\"><a href=\"#iPhone-iPad-端配置\" class=\"headerlink\" title=\"iPhone/ iPad 端配置\"></a>iPhone/ iPad 端配置</h2><h3 id=\"第一步，设置-找到-vpn；\"><a href=\"#第一步，设置-找到-vpn；\" class=\"headerlink\" title=\"第一步，设置,找到 vpn；\"></a>第一步，设置,找到 vpn；</h3><p><img src=\"https://i.loli.net/2020/07/24/yX9FQ15cfZHwAlk.jpg\" alt=\"IMG_4B9266DCE871-1.jpeg\"></p>\n<h3 id=\"第二步，添加-VPN-配置\"><a href=\"#第二步，添加-VPN-配置\" class=\"headerlink\" title=\"第二步，添加 VPN 配置\"></a>第二步，添加 VPN 配置</h3><p><img src=\"https://i.loli.net/2020/07/24/CqjvQlk9Y45Wmru.jpg\" alt=\"IMG_1D7A78A9CCBF-1.jpeg\"></p>\n<h3 id=\"第三步，-类型选择选择-“L2TP”-，描述自定义，账户：vpn、密码和密钥都是：vpn-点击完成；\"><a href=\"#第三步，-类型选择选择-“L2TP”-，描述自定义，账户：vpn、密码和密钥都是：vpn-点击完成；\" class=\"headerlink\" title=\"第三步， 类型选择选择 “L2TP” ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；\"></a>第三步， 类型选择选择 “L2TP” ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；</h3><p><img src=\"https://i.loli.net/2020/07/24/AVK7u8DGmtIQaNS.jpg\" alt=\"IMG_55891B4EB4D4-1.jpeg\"></p>\n<h3 id=\"第四步，回到-vpn-列表，选中一个-vpn-配置，点击连接；\"><a href=\"#第四步，回到-vpn-列表，选中一个-vpn-配置，点击连接；\" class=\"headerlink\" title=\"第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；\"></a>第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；</h3><p><img src=\"https://i.loli.net/2020/07/24/4SIzWGFaOTYEiM1.jpg\" alt=\"IMG_24A8798784CA-1.jpeg\"></p>\n<h3 id=\"说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\"><a href=\"#说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\" class=\"headerlink\" title=\"说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\"></a>说明：所有 ip 节点均来自<a href=\"https://www.vpngate.net/cn/，\">https://www.vpngate.net/cn/，</a></h3><h3 id=\"所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\"><a href=\"#所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\" class=\"headerlink\" title=\"所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\"></a>所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！</h3>","site":{"data":{}},"excerpt":"<h4 id=\"教你免费科学上网\"><a href=\"#教你免费科学上网\" class=\"headerlink\" title=\"教你免费科学上网\"></a>教你免费科学上网</h4><p>无需安装额外工具，L2TP 方式配置方式，mac 和 ios 通用的翻墙方式，重点是完全免费。</p>\n<h3 id=\"获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\"><a href=\"#获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\" class=\"headerlink\" title=\"获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\"></a>获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息</h3>","more":"<h2 id=\"Mac-端配置\"><a href=\"#Mac-端配置\" class=\"headerlink\" title=\"Mac 端配置\"></a>Mac 端配置</h2><h3 id=\"第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\"><a href=\"#第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\" class=\"headerlink\" title=\"第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；\"></a>第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；</h3><h3 id=\"第二步，点击网络配置屏幕上的-“-”-按钮；\"><a href=\"#第二步，点击网络配置屏幕上的-“-”-按钮；\" class=\"headerlink\" title=\"第二步，点击网络配置屏幕上的 “+” 按钮；\"></a>第二步，点击网络配置屏幕上的 “+” 按钮；</h3><p><img src=\"https://i.loli.net/2020/07/24/jlPDQA496LBnuXS.png\" alt=\"第二步\"></p>\n<h3 id=\"第三步，在-“Interface”-选择-“VPN”，”VPN-Type”-选择-“L2TP-IPsec”-，服务名称自定义。并点击-“创建”-按钮；\"><a href=\"#第三步，在-“Interface”-选择-“VPN”，”VPN-Type”-选择-“L2TP-IPsec”-，服务名称自定义。并点击-“创建”-按钮；\" class=\"headerlink\" title=\"第三步，在 “Interface” 选择 “VPN”，”VPN Type” 选择 “L2TP/IPsec” ，服务名称自定义。并点击 “创建” 按钮；\"></a>第三步，在 “Interface” 选择 “VPN”，”VPN Type” 选择 “L2TP/IPsec” ，服务名称自定义。并点击 “创建” 按钮；</h3><p><img src=\"https://i.loli.net/2020/07/24/hl4x9A1DCfdQVnK.png\" alt=\"第三步\"></p>\n<h3 id=\"第四步，填写-vpn-配置-ip-用户名写-vpn（小写）；\"><a href=\"#第四步，填写-vpn-配置-ip-用户名写-vpn（小写）；\" class=\"headerlink\" title=\"第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；\"></a>第四步，填写 vpn 配置 ip,用户名写 vpn（小写）；</h3><p><img src=\"https://i.loli.net/2020/07/24/d9s4BMcXHQakGOz.png\" alt=\"第四步\"></p>\n<h3 id=\"第五步，打开认证设置，密码：vpn-共享密钥：vpn；\"><a href=\"#第五步，打开认证设置，密码：vpn-共享密钥：vpn；\" class=\"headerlink\" title=\"第五步，打开认证设置，密码：vpn ,共享密钥：vpn；\"></a>第五步，打开认证设置，密码：vpn ,共享密钥：vpn；</h3><p><img src=\"https://i.loli.net/2020/07/24/pi3FV9rvEBk1oqJ.png\" alt=\"mac4.png\"> <img src=\"https://i.loli.net/2020/07/24/jD8qgBzdYXVAy4T.png\" alt=\"第五步\"></p>\n<h3 id=\"第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\"><a href=\"#第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\" class=\"headerlink\" title=\"第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。\"></a>第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。</h3><p><img src=\"https://i.loli.net/2020/07/24/MxVifIOamFB653T.png\" alt=\"mac5.png\"></p>\n<h2 id=\"iPhone-iPad-端配置\"><a href=\"#iPhone-iPad-端配置\" class=\"headerlink\" title=\"iPhone/ iPad 端配置\"></a>iPhone/ iPad 端配置</h2><h3 id=\"第一步，设置-找到-vpn；\"><a href=\"#第一步，设置-找到-vpn；\" class=\"headerlink\" title=\"第一步，设置,找到 vpn；\"></a>第一步，设置,找到 vpn；</h3><p><img src=\"https://i.loli.net/2020/07/24/yX9FQ15cfZHwAlk.jpg\" alt=\"IMG_4B9266DCE871-1.jpeg\"></p>\n<h3 id=\"第二步，添加-VPN-配置\"><a href=\"#第二步，添加-VPN-配置\" class=\"headerlink\" title=\"第二步，添加 VPN 配置\"></a>第二步，添加 VPN 配置</h3><p><img src=\"https://i.loli.net/2020/07/24/CqjvQlk9Y45Wmru.jpg\" alt=\"IMG_1D7A78A9CCBF-1.jpeg\"></p>\n<h3 id=\"第三步，-类型选择选择-“L2TP”-，描述自定义，账户：vpn、密码和密钥都是：vpn-点击完成；\"><a href=\"#第三步，-类型选择选择-“L2TP”-，描述自定义，账户：vpn、密码和密钥都是：vpn-点击完成；\" class=\"headerlink\" title=\"第三步， 类型选择选择 “L2TP” ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；\"></a>第三步， 类型选择选择 “L2TP” ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成；</h3><p><img src=\"https://i.loli.net/2020/07/24/AVK7u8DGmtIQaNS.jpg\" alt=\"IMG_55891B4EB4D4-1.jpeg\"></p>\n<h3 id=\"第四步，回到-vpn-列表，选中一个-vpn-配置，点击连接；\"><a href=\"#第四步，回到-vpn-列表，选中一个-vpn-配置，点击连接；\" class=\"headerlink\" title=\"第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；\"></a>第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接；</h3><p><img src=\"https://i.loli.net/2020/07/24/4SIzWGFaOTYEiM1.jpg\" alt=\"IMG_24A8798784CA-1.jpeg\"></p>\n<h3 id=\"说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\"><a href=\"#说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\" class=\"headerlink\" title=\"说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\"></a>说明：所有 ip 节点均来自<a href=\"https://www.vpngate.net/cn/，\">https://www.vpngate.net/cn/，</a></h3><h3 id=\"所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\"><a href=\"#所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\" class=\"headerlink\" title=\"所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\"></a>所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！</h3>"},{"title":"免费VPN  L2TP方式,window和android 配置方式","keywords":"VPN android window 科学上网","thumbnail":"https://i.loli.net/2020/07/24/Scq1k7hbzwUTQo2.png","comments":1,"_content":"\n#### 教你免费科学上网\n\n无需安装额外工具，L2TP 方式配置方式，window 和 android 通用的翻墙方式，重点是完全免费。\n\n### 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\n\n<!-- more -->\n\n## windows 端配置\n\n### 第一步，在 Windows 界面的右下角右击网络图标，并点击 \"打开网络和共享中心\"；\n\n### 第二步，在 \"网络共享中心\" 点击 \"建立一个新的连接或网络\"\n\n![02.jpg](https://i.loli.net/2020/07/24/6LnqXO3rRdVkolc.jpg)\n\n### 第三步，选择 \"连接到工作区\"\n\n![03.jpg](https://i.loli.net/2020/07/24/RMHUC8u379EzFcb.jpg)\n\n### 第四步，选择 \"使用我的 Internet 连接 (VPN)\"\n\n![04.jpg](https://i.loli.net/2020/07/24/JHIajRqOKbLhBiV.jpg)\n\n### 第五步，输入你找到的 ip 地址，复选框 \"现在不连接; 仅进行设置以便稍后连接\"；\n\n![05.jpg](https://i.loli.net/2020/07/24/ivrukAPn3S1jwDt.jpg)\n\n### 第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 \"vpn\"\n\n![06.jpg](https://i.loli.net/2020/07/24/ImFOdcXxVs5pK9E.jpg)\n\n### 第七步，当 \"连接已经可以使用\" 消息出现，点击 \"关闭\" 按钮。请勿点击 \"现在连接\" 按钮\n\n![07.jpg](https://i.loli.net/2020/07/24/zWTcvOIHhfKuMD4.jpg)\n\n### 第八步，到 \"网络和共享中心\" 并点击 \"更改适配器设置\"\n\n![08.jpg](https://i.loli.net/2020/07/24/NTa3H9EubIidcLG.jpg)\n\n### 第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 \"属性\"\n\n![09.jpg](https://i.loli.net/2020/07/24/HxFrMLXQJP3hnON.jpg)\n\n### 第十步，在属性这一屏，切换到 \"安全\" 标签\n\n![第十步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/10.jpg)\n\n### 第十一步，点击 \"高级设置\" 按钮,点击 \"使用预共享密钥作身份验证\" 并在 \"密钥\" 字段输入 \"vpn\"\n\n![第十一步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/11.jpg)\n\n### 第十二步，上述配置完成后，点击 \"确定\" 按钮两次，以关闭 VPN 连接设置的属性界面\n\n### 第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 \"用户名\" 和 \"密码\" 字段都输入 \"vpn\"，点击连接\n\n![第十三步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/12.jpg)\n\n### 第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 \"VPN 连接\" 图标的状态应该是 \"已连接\"\n\n![第十四步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/14.jpg)\n\n## android 端配置（华为手机为例）\n\n### 第一步，设置,找到更多连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android01.jpg)\n\n### 第二步，VPN 选项点进去\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android02.jpg)\n\n### 第三步， 点击田间 vpn 网络\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android03.jpg)\n\n### 第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android05.jpg)\n\n### 第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android06.jpg)\n\n### 连接成功后会显示已连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android07.jpg)\n\n### 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\n\n### 所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\n","source":"_posts/Node/vpn2.md","raw":"---\ntitle: 免费VPN  L2TP方式,window和android 配置方式\ntags: VPN L2TP\n# toc: true\nkeywords: VPN android window 科学上网\nthumbnail: 'https://i.loli.net/2020/07/24/Scq1k7hbzwUTQo2.png'\ncategories:\n  - Node\ncomments: true\n---\n\n#### 教你免费科学上网\n\n无需安装额外工具，L2TP 方式配置方式，window 和 android 通用的翻墙方式，重点是完全免费。\n\n### 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\n\n<!-- more -->\n\n## windows 端配置\n\n### 第一步，在 Windows 界面的右下角右击网络图标，并点击 \"打开网络和共享中心\"；\n\n### 第二步，在 \"网络共享中心\" 点击 \"建立一个新的连接或网络\"\n\n![02.jpg](https://i.loli.net/2020/07/24/6LnqXO3rRdVkolc.jpg)\n\n### 第三步，选择 \"连接到工作区\"\n\n![03.jpg](https://i.loli.net/2020/07/24/RMHUC8u379EzFcb.jpg)\n\n### 第四步，选择 \"使用我的 Internet 连接 (VPN)\"\n\n![04.jpg](https://i.loli.net/2020/07/24/JHIajRqOKbLhBiV.jpg)\n\n### 第五步，输入你找到的 ip 地址，复选框 \"现在不连接; 仅进行设置以便稍后连接\"；\n\n![05.jpg](https://i.loli.net/2020/07/24/ivrukAPn3S1jwDt.jpg)\n\n### 第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 \"vpn\"\n\n![06.jpg](https://i.loli.net/2020/07/24/ImFOdcXxVs5pK9E.jpg)\n\n### 第七步，当 \"连接已经可以使用\" 消息出现，点击 \"关闭\" 按钮。请勿点击 \"现在连接\" 按钮\n\n![07.jpg](https://i.loli.net/2020/07/24/zWTcvOIHhfKuMD4.jpg)\n\n### 第八步，到 \"网络和共享中心\" 并点击 \"更改适配器设置\"\n\n![08.jpg](https://i.loli.net/2020/07/24/NTa3H9EubIidcLG.jpg)\n\n### 第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 \"属性\"\n\n![09.jpg](https://i.loli.net/2020/07/24/HxFrMLXQJP3hnON.jpg)\n\n### 第十步，在属性这一屏，切换到 \"安全\" 标签\n\n![第十步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/10.jpg)\n\n### 第十一步，点击 \"高级设置\" 按钮,点击 \"使用预共享密钥作身份验证\" 并在 \"密钥\" 字段输入 \"vpn\"\n\n![第十一步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/11.jpg)\n\n### 第十二步，上述配置完成后，点击 \"确定\" 按钮两次，以关闭 VPN 连接设置的属性界面\n\n### 第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 \"用户名\" 和 \"密码\" 字段都输入 \"vpn\"，点击连接\n\n![第十三步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/12.jpg)\n\n### 第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 \"VPN 连接\" 图标的状态应该是 \"已连接\"\n\n![第十四步](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/14.jpg)\n\n## android 端配置（华为手机为例）\n\n### 第一步，设置,找到更多连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android01.jpg)\n\n### 第二步，VPN 选项点进去\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android02.jpg)\n\n### 第三步， 点击田间 vpn 网络\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android03.jpg)\n\n### 第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android05.jpg)\n\n### 第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android06.jpg)\n\n### 连接成功后会显示已连接\n\n![](https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android07.jpg)\n\n### 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\n\n### 所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\n","slug":"Node/vpn2","published":1,"date":"2020-07-24T09:30:57.548Z","updated":"2020-07-24T10:24:48.495Z","_id":"ckd00yez90000y9wl9mg93ls2","layout":"post","photos":[],"link":"","content":"<h4 id=\"教你免费科学上网\"><a href=\"#教你免费科学上网\" class=\"headerlink\" title=\"教你免费科学上网\"></a>教你免费科学上网</h4><p>无需安装额外工具，L2TP 方式配置方式，window 和 android 通用的翻墙方式，重点是完全免费。</p>\n<h3 id=\"获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\"><a href=\"#获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\" class=\"headerlink\" title=\"获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\"></a>获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息</h3><a id=\"more\"></a>\n\n<h2 id=\"windows-端配置\"><a href=\"#windows-端配置\" class=\"headerlink\" title=\"windows 端配置\"></a>windows 端配置</h2><h3 id=\"第一步，在-Windows-界面的右下角右击网络图标，并点击-“打开网络和共享中心”；\"><a href=\"#第一步，在-Windows-界面的右下角右击网络图标，并点击-“打开网络和共享中心”；\" class=\"headerlink\" title=\"第一步，在 Windows 界面的右下角右击网络图标，并点击 “打开网络和共享中心”；\"></a>第一步，在 Windows 界面的右下角右击网络图标，并点击 “打开网络和共享中心”；</h3><h3 id=\"第二步，在-“网络共享中心”-点击-“建立一个新的连接或网络”\"><a href=\"#第二步，在-“网络共享中心”-点击-“建立一个新的连接或网络”\" class=\"headerlink\" title=\"第二步，在 “网络共享中心” 点击 “建立一个新的连接或网络”\"></a>第二步，在 “网络共享中心” 点击 “建立一个新的连接或网络”</h3><p><img src=\"https://i.loli.net/2020/07/24/6LnqXO3rRdVkolc.jpg\" alt=\"02.jpg\"></p>\n<h3 id=\"第三步，选择-“连接到工作区”\"><a href=\"#第三步，选择-“连接到工作区”\" class=\"headerlink\" title=\"第三步，选择 “连接到工作区”\"></a>第三步，选择 “连接到工作区”</h3><p><img src=\"https://i.loli.net/2020/07/24/RMHUC8u379EzFcb.jpg\" alt=\"03.jpg\"></p>\n<h3 id=\"第四步，选择-“使用我的-Internet-连接-VPN-”\"><a href=\"#第四步，选择-“使用我的-Internet-连接-VPN-”\" class=\"headerlink\" title=\"第四步，选择 “使用我的 Internet 连接 (VPN)”\"></a>第四步，选择 “使用我的 Internet 连接 (VPN)”</h3><p><img src=\"https://i.loli.net/2020/07/24/JHIajRqOKbLhBiV.jpg\" alt=\"04.jpg\"></p>\n<h3 id=\"第五步，输入你找到的-ip-地址，复选框-“现在不连接-仅进行设置以便稍后连接”；\"><a href=\"#第五步，输入你找到的-ip-地址，复选框-“现在不连接-仅进行设置以便稍后连接”；\" class=\"headerlink\" title=\"第五步，输入你找到的 ip 地址，复选框 “现在不连接; 仅进行设置以便稍后连接”；\"></a>第五步，输入你找到的 ip 地址，复选框 “现在不连接; 仅进行设置以便稍后连接”；</h3><p><img src=\"https://i.loli.net/2020/07/24/ivrukAPn3S1jwDt.jpg\" alt=\"05.jpg\"></p>\n<h3 id=\"第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入-“vpn”\"><a href=\"#第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入-“vpn”\" class=\"headerlink\" title=\"第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 “vpn”\"></a>第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 “vpn”</h3><p><img src=\"https://i.loli.net/2020/07/24/ImFOdcXxVs5pK9E.jpg\" alt=\"06.jpg\"></p>\n<h3 id=\"第七步，当-“连接已经可以使用”-消息出现，点击-“关闭”-按钮。请勿点击-“现在连接”-按钮\"><a href=\"#第七步，当-“连接已经可以使用”-消息出现，点击-“关闭”-按钮。请勿点击-“现在连接”-按钮\" class=\"headerlink\" title=\"第七步，当 “连接已经可以使用” 消息出现，点击 “关闭” 按钮。请勿点击 “现在连接” 按钮\"></a>第七步，当 “连接已经可以使用” 消息出现，点击 “关闭” 按钮。请勿点击 “现在连接” 按钮</h3><p><img src=\"https://i.loli.net/2020/07/24/zWTcvOIHhfKuMD4.jpg\" alt=\"07.jpg\"></p>\n<h3 id=\"第八步，到-“网络和共享中心”-并点击-“更改适配器设置”\"><a href=\"#第八步，到-“网络和共享中心”-并点击-“更改适配器设置”\" class=\"headerlink\" title=\"第八步，到 “网络和共享中心” 并点击 “更改适配器设置”\"></a>第八步，到 “网络和共享中心” 并点击 “更改适配器设置”</h3><p><img src=\"https://i.loli.net/2020/07/24/NTa3H9EubIidcLG.jpg\" alt=\"08.jpg\"></p>\n<h3 id=\"第九步，当前定义的-VPN-连接设置被列出来了。右击你在上一步创建的图标，并点击-“属性”\"><a href=\"#第九步，当前定义的-VPN-连接设置被列出来了。右击你在上一步创建的图标，并点击-“属性”\" class=\"headerlink\" title=\"第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 “属性”\"></a>第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 “属性”</h3><p><img src=\"https://i.loli.net/2020/07/24/HxFrMLXQJP3hnON.jpg\" alt=\"09.jpg\"></p>\n<h3 id=\"第十步，在属性这一屏，切换到-“安全”-标签\"><a href=\"#第十步，在属性这一屏，切换到-“安全”-标签\" class=\"headerlink\" title=\"第十步，在属性这一屏，切换到 “安全” 标签\"></a>第十步，在属性这一屏，切换到 “安全” 标签</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/10.jpg\" alt=\"第十步\"></p>\n<h3 id=\"第十一步，点击-“高级设置”-按钮-点击-“使用预共享密钥作身份验证”-并在-“密钥”-字段输入-“vpn”\"><a href=\"#第十一步，点击-“高级设置”-按钮-点击-“使用预共享密钥作身份验证”-并在-“密钥”-字段输入-“vpn”\" class=\"headerlink\" title=\"第十一步，点击 “高级设置” 按钮,点击 “使用预共享密钥作身份验证” 并在 “密钥” 字段输入 “vpn”\"></a>第十一步，点击 “高级设置” 按钮,点击 “使用预共享密钥作身份验证” 并在 “密钥” 字段输入 “vpn”</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/11.jpg\" alt=\"第十一步\"></p>\n<h3 id=\"第十二步，上述配置完成后，点击-“确定”-按钮两次，以关闭-VPN-连接设置的属性界面\"><a href=\"#第十二步，上述配置完成后，点击-“确定”-按钮两次，以关闭-VPN-连接设置的属性界面\" class=\"headerlink\" title=\"第十二步，上述配置完成后，点击 “确定” 按钮两次，以关闭 VPN 连接设置的属性界面\"></a>第十二步，上述配置完成后，点击 “确定” 按钮两次，以关闭 VPN 连接设置的属性界面</h3><h3 id=\"第十三步，双击已建立的-VPN-连接设置，以下屏幕将出现，在-“用户名”-和-“密码”-字段都输入-“vpn”，点击连接\"><a href=\"#第十三步，双击已建立的-VPN-连接设置，以下屏幕将出现，在-“用户名”-和-“密码”-字段都输入-“vpn”，点击连接\" class=\"headerlink\" title=\"第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 “用户名” 和 “密码” 字段都输入 “vpn”，点击连接\"></a>第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 “用户名” 和 “密码” 字段都输入 “vpn”，点击连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/12.jpg\" alt=\"第十三步\"></p>\n<h3 id=\"第十四步，如果成功建立-VPN-连接，-VPN-连接图标出现在屏幕上，当您单击-Windows-屏幕右下角的网络图标会将其列出。-“VPN-连接”-图标的状态应该是-“已连接”\"><a href=\"#第十四步，如果成功建立-VPN-连接，-VPN-连接图标出现在屏幕上，当您单击-Windows-屏幕右下角的网络图标会将其列出。-“VPN-连接”-图标的状态应该是-“已连接”\" class=\"headerlink\" title=\"第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 “VPN 连接” 图标的状态应该是 “已连接”\"></a>第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 “VPN 连接” 图标的状态应该是 “已连接”</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/14.jpg\" alt=\"第十四步\"></p>\n<h2 id=\"android-端配置（华为手机为例）\"><a href=\"#android-端配置（华为手机为例）\" class=\"headerlink\" title=\"android 端配置（华为手机为例）\"></a>android 端配置（华为手机为例）</h2><h3 id=\"第一步，设置-找到更多连接\"><a href=\"#第一步，设置-找到更多连接\" class=\"headerlink\" title=\"第一步，设置,找到更多连接\"></a>第一步，设置,找到更多连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android01.jpg\" alt=\"\"></p>\n<h3 id=\"第二步，VPN-选项点进去\"><a href=\"#第二步，VPN-选项点进去\" class=\"headerlink\" title=\"第二步，VPN 选项点进去\"></a>第二步，VPN 选项点进去</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android02.jpg\" alt=\"\"></p>\n<h3 id=\"第三步，-点击田间-vpn-网络\"><a href=\"#第三步，-点击田间-vpn-网络\" class=\"headerlink\" title=\"第三步， 点击田间 vpn 网络\"></a>第三步， 点击田间 vpn 网络</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android03.jpg\" alt=\"\"></p>\n<h3 id=\"第四步，如下图示例配置，名称：自定义、类型：L2TP-IPSec-PSK、服务器地址：你找到的-ip、IPSec-共享密钥：vpn、转发路线：0-0-0-0-0，点击保存\"><a href=\"#第四步，如下图示例配置，名称：自定义、类型：L2TP-IPSec-PSK、服务器地址：你找到的-ip、IPSec-共享密钥：vpn、转发路线：0-0-0-0-0，点击保存\" class=\"headerlink\" title=\"第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存\"></a>第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android05.jpg\" alt=\"\"></p>\n<h3 id=\"第五步，-回到-vpn-列表界面，点击一个配置输入用户名密码：都是-vpn-点击连接\"><a href=\"#第五步，-回到-vpn-列表界面，点击一个配置输入用户名密码：都是-vpn-点击连接\" class=\"headerlink\" title=\"第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接\"></a>第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android06.jpg\" alt=\"\"></p>\n<h3 id=\"连接成功后会显示已连接\"><a href=\"#连接成功后会显示已连接\" class=\"headerlink\" title=\"连接成功后会显示已连接\"></a>连接成功后会显示已连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android07.jpg\" alt=\"\"></p>\n<h3 id=\"说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\"><a href=\"#说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\" class=\"headerlink\" title=\"说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\"></a>说明：所有 ip 节点均来自<a href=\"https://www.vpngate.net/cn/，\">https://www.vpngate.net/cn/，</a></h3><h3 id=\"所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\"><a href=\"#所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\" class=\"headerlink\" title=\"所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\"></a>所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！</h3>","site":{"data":{}},"excerpt":"<h4 id=\"教你免费科学上网\"><a href=\"#教你免费科学上网\" class=\"headerlink\" title=\"教你免费科学上网\"></a>教你免费科学上网</h4><p>无需安装额外工具，L2TP 方式配置方式，window 和 android 通用的翻墙方式，重点是完全免费。</p>\n<h3 id=\"获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\"><a href=\"#获取最新-vpn-ip-方式可以加钉钉群：31971273，每天定时更新节点信息\" class=\"headerlink\" title=\"获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息\"></a>获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息</h3>","more":"<h2 id=\"windows-端配置\"><a href=\"#windows-端配置\" class=\"headerlink\" title=\"windows 端配置\"></a>windows 端配置</h2><h3 id=\"第一步，在-Windows-界面的右下角右击网络图标，并点击-“打开网络和共享中心”；\"><a href=\"#第一步，在-Windows-界面的右下角右击网络图标，并点击-“打开网络和共享中心”；\" class=\"headerlink\" title=\"第一步，在 Windows 界面的右下角右击网络图标，并点击 “打开网络和共享中心”；\"></a>第一步，在 Windows 界面的右下角右击网络图标，并点击 “打开网络和共享中心”；</h3><h3 id=\"第二步，在-“网络共享中心”-点击-“建立一个新的连接或网络”\"><a href=\"#第二步，在-“网络共享中心”-点击-“建立一个新的连接或网络”\" class=\"headerlink\" title=\"第二步，在 “网络共享中心” 点击 “建立一个新的连接或网络”\"></a>第二步，在 “网络共享中心” 点击 “建立一个新的连接或网络”</h3><p><img src=\"https://i.loli.net/2020/07/24/6LnqXO3rRdVkolc.jpg\" alt=\"02.jpg\"></p>\n<h3 id=\"第三步，选择-“连接到工作区”\"><a href=\"#第三步，选择-“连接到工作区”\" class=\"headerlink\" title=\"第三步，选择 “连接到工作区”\"></a>第三步，选择 “连接到工作区”</h3><p><img src=\"https://i.loli.net/2020/07/24/RMHUC8u379EzFcb.jpg\" alt=\"03.jpg\"></p>\n<h3 id=\"第四步，选择-“使用我的-Internet-连接-VPN-”\"><a href=\"#第四步，选择-“使用我的-Internet-连接-VPN-”\" class=\"headerlink\" title=\"第四步，选择 “使用我的 Internet 连接 (VPN)”\"></a>第四步，选择 “使用我的 Internet 连接 (VPN)”</h3><p><img src=\"https://i.loli.net/2020/07/24/JHIajRqOKbLhBiV.jpg\" alt=\"04.jpg\"></p>\n<h3 id=\"第五步，输入你找到的-ip-地址，复选框-“现在不连接-仅进行设置以便稍后连接”；\"><a href=\"#第五步，输入你找到的-ip-地址，复选框-“现在不连接-仅进行设置以便稍后连接”；\" class=\"headerlink\" title=\"第五步，输入你找到的 ip 地址，复选框 “现在不连接; 仅进行设置以便稍后连接”；\"></a>第五步，输入你找到的 ip 地址，复选框 “现在不连接; 仅进行设置以便稍后连接”；</h3><p><img src=\"https://i.loli.net/2020/07/24/ivrukAPn3S1jwDt.jpg\" alt=\"05.jpg\"></p>\n<h3 id=\"第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入-“vpn”\"><a href=\"#第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入-“vpn”\" class=\"headerlink\" title=\"第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 “vpn”\"></a>第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 “vpn”</h3><p><img src=\"https://i.loli.net/2020/07/24/ImFOdcXxVs5pK9E.jpg\" alt=\"06.jpg\"></p>\n<h3 id=\"第七步，当-“连接已经可以使用”-消息出现，点击-“关闭”-按钮。请勿点击-“现在连接”-按钮\"><a href=\"#第七步，当-“连接已经可以使用”-消息出现，点击-“关闭”-按钮。请勿点击-“现在连接”-按钮\" class=\"headerlink\" title=\"第七步，当 “连接已经可以使用” 消息出现，点击 “关闭” 按钮。请勿点击 “现在连接” 按钮\"></a>第七步，当 “连接已经可以使用” 消息出现，点击 “关闭” 按钮。请勿点击 “现在连接” 按钮</h3><p><img src=\"https://i.loli.net/2020/07/24/zWTcvOIHhfKuMD4.jpg\" alt=\"07.jpg\"></p>\n<h3 id=\"第八步，到-“网络和共享中心”-并点击-“更改适配器设置”\"><a href=\"#第八步，到-“网络和共享中心”-并点击-“更改适配器设置”\" class=\"headerlink\" title=\"第八步，到 “网络和共享中心” 并点击 “更改适配器设置”\"></a>第八步，到 “网络和共享中心” 并点击 “更改适配器设置”</h3><p><img src=\"https://i.loli.net/2020/07/24/NTa3H9EubIidcLG.jpg\" alt=\"08.jpg\"></p>\n<h3 id=\"第九步，当前定义的-VPN-连接设置被列出来了。右击你在上一步创建的图标，并点击-“属性”\"><a href=\"#第九步，当前定义的-VPN-连接设置被列出来了。右击你在上一步创建的图标，并点击-“属性”\" class=\"headerlink\" title=\"第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 “属性”\"></a>第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 “属性”</h3><p><img src=\"https://i.loli.net/2020/07/24/HxFrMLXQJP3hnON.jpg\" alt=\"09.jpg\"></p>\n<h3 id=\"第十步，在属性这一屏，切换到-“安全”-标签\"><a href=\"#第十步，在属性这一屏，切换到-“安全”-标签\" class=\"headerlink\" title=\"第十步，在属性这一屏，切换到 “安全” 标签\"></a>第十步，在属性这一屏，切换到 “安全” 标签</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/10.jpg\" alt=\"第十步\"></p>\n<h3 id=\"第十一步，点击-“高级设置”-按钮-点击-“使用预共享密钥作身份验证”-并在-“密钥”-字段输入-“vpn”\"><a href=\"#第十一步，点击-“高级设置”-按钮-点击-“使用预共享密钥作身份验证”-并在-“密钥”-字段输入-“vpn”\" class=\"headerlink\" title=\"第十一步，点击 “高级设置” 按钮,点击 “使用预共享密钥作身份验证” 并在 “密钥” 字段输入 “vpn”\"></a>第十一步，点击 “高级设置” 按钮,点击 “使用预共享密钥作身份验证” 并在 “密钥” 字段输入 “vpn”</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/11.jpg\" alt=\"第十一步\"></p>\n<h3 id=\"第十二步，上述配置完成后，点击-“确定”-按钮两次，以关闭-VPN-连接设置的属性界面\"><a href=\"#第十二步，上述配置完成后，点击-“确定”-按钮两次，以关闭-VPN-连接设置的属性界面\" class=\"headerlink\" title=\"第十二步，上述配置完成后，点击 “确定” 按钮两次，以关闭 VPN 连接设置的属性界面\"></a>第十二步，上述配置完成后，点击 “确定” 按钮两次，以关闭 VPN 连接设置的属性界面</h3><h3 id=\"第十三步，双击已建立的-VPN-连接设置，以下屏幕将出现，在-“用户名”-和-“密码”-字段都输入-“vpn”，点击连接\"><a href=\"#第十三步，双击已建立的-VPN-连接设置，以下屏幕将出现，在-“用户名”-和-“密码”-字段都输入-“vpn”，点击连接\" class=\"headerlink\" title=\"第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 “用户名” 和 “密码” 字段都输入 “vpn”，点击连接\"></a>第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 “用户名” 和 “密码” 字段都输入 “vpn”，点击连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/12.jpg\" alt=\"第十三步\"></p>\n<h3 id=\"第十四步，如果成功建立-VPN-连接，-VPN-连接图标出现在屏幕上，当您单击-Windows-屏幕右下角的网络图标会将其列出。-“VPN-连接”-图标的状态应该是-“已连接”\"><a href=\"#第十四步，如果成功建立-VPN-连接，-VPN-连接图标出现在屏幕上，当您单击-Windows-屏幕右下角的网络图标会将其列出。-“VPN-连接”-图标的状态应该是-“已连接”\" class=\"headerlink\" title=\"第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 “VPN 连接” 图标的状态应该是 “已连接”\"></a>第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 “VPN 连接” 图标的状态应该是 “已连接”</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/14.jpg\" alt=\"第十四步\"></p>\n<h2 id=\"android-端配置（华为手机为例）\"><a href=\"#android-端配置（华为手机为例）\" class=\"headerlink\" title=\"android 端配置（华为手机为例）\"></a>android 端配置（华为手机为例）</h2><h3 id=\"第一步，设置-找到更多连接\"><a href=\"#第一步，设置-找到更多连接\" class=\"headerlink\" title=\"第一步，设置,找到更多连接\"></a>第一步，设置,找到更多连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android01.jpg\" alt=\"\"></p>\n<h3 id=\"第二步，VPN-选项点进去\"><a href=\"#第二步，VPN-选项点进去\" class=\"headerlink\" title=\"第二步，VPN 选项点进去\"></a>第二步，VPN 选项点进去</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android02.jpg\" alt=\"\"></p>\n<h3 id=\"第三步，-点击田间-vpn-网络\"><a href=\"#第三步，-点击田间-vpn-网络\" class=\"headerlink\" title=\"第三步， 点击田间 vpn 网络\"></a>第三步， 点击田间 vpn 网络</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android03.jpg\" alt=\"\"></p>\n<h3 id=\"第四步，如下图示例配置，名称：自定义、类型：L2TP-IPSec-PSK、服务器地址：你找到的-ip、IPSec-共享密钥：vpn、转发路线：0-0-0-0-0，点击保存\"><a href=\"#第四步，如下图示例配置，名称：自定义、类型：L2TP-IPSec-PSK、服务器地址：你找到的-ip、IPSec-共享密钥：vpn、转发路线：0-0-0-0-0，点击保存\" class=\"headerlink\" title=\"第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存\"></a>第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android05.jpg\" alt=\"\"></p>\n<h3 id=\"第五步，-回到-vpn-列表界面，点击一个配置输入用户名密码：都是-vpn-点击连接\"><a href=\"#第五步，-回到-vpn-列表界面，点击一个配置输入用户名密码：都是-vpn-点击连接\" class=\"headerlink\" title=\"第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接\"></a>第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android06.jpg\" alt=\"\"></p>\n<h3 id=\"连接成功后会显示已连接\"><a href=\"#连接成功后会显示已连接\" class=\"headerlink\" title=\"连接成功后会显示已连接\"></a>连接成功后会显示已连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lightzhu/public_cdn@0.6.6/image/vpn/android07.jpg\" alt=\"\"></p>\n<h3 id=\"说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\"><a href=\"#说明：所有-ip-节点均来自https-www-vpngate-net-cn-，\" class=\"headerlink\" title=\"说明：所有 ip 节点均来自https://www.vpngate.net/cn/，\"></a>说明：所有 ip 节点均来自<a href=\"https://www.vpngate.net/cn/，\">https://www.vpngate.net/cn/，</a></h3><h3 id=\"所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\"><a href=\"#所有科学上网都没有稳定的，连接不上了就去试别的-ip-更多科学上网方式欢迎交流！\" class=\"headerlink\" title=\"所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！\"></a>所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck99og6id00068fwl5x8i0cm1","category_id":"ck99og6if00088fwl9uckdby2","_id":"ck99og6ij000f8fwl4apy9no4"},{"post_id":"ckaz5svpq00003iwldcjvfm6q","category_id":"ck99og6ii000c8fwldrj17zx6","_id":"ckaz5svps00023iwl3bz3dzrh"},{"post_id":"ckaz5syec00033iwl10xsghi5","category_id":"ck99og6ii000c8fwldrj17zx6","_id":"ckaz5syee00053iwl9bsodx52"},{"post_id":"ckaz5t16k00063iwl0e2afiud","category_id":"ck99og6ii000c8fwldrj17zx6","_id":"ckaz5t16l00083iwl9h3841n1"},{"post_id":"ckd0006el0000r1wl3wbr3kb9","category_id":"ckd0007o90001r1wlhi6h40lg","_id":"ckd0007oa0004r1wlb8xvgl1c"},{"post_id":"ckd00yez90000y9wl9mg93ls2","category_id":"ckd0007o90001r1wlhi6h40lg","_id":"ckd010k420002y9wlejayd7si"}],"PostTag":[{"post_id":"ck99og6hn00038fwl9f196241","tag_id":"ck99og6ho00048fwl8hkp71qk","_id":"ck99og6hq00058fwlctsjeykm"},{"post_id":"ck99og6id00068fwl5x8i0cm1","tag_id":"ck99og6if00098fwlfryh0vrx","_id":"ck99og6ii000e8fwl4qv9heje"},{"post_id":"ck99og6hf00018fwl3uou7hei","tag_id":"ckaz5hrcs0000zqwl205qa1sl","_id":"ckaz5hrcv0001zqwl2zuc9bcl"},{"post_id":"ckaz5svpq00003iwldcjvfm6q","tag_id":"ck99og6ii000d8fwlfbjx71em","_id":"ckaz5svps00013iwld33j2ww1"},{"post_id":"ckaz5syec00033iwl10xsghi5","tag_id":"ck99og6ij000h8fwl6wadbrgz","_id":"ckaz5syed00043iwlep37fp0x"},{"post_id":"ckaz5t16k00063iwl0e2afiud","tag_id":"ck99og6il000l8fwl8bs5hqek","_id":"ckaz5t16l00073iwlaftg2y1y"},{"post_id":"ckaz5wfpc000e3iwlabcc0xk4","tag_id":"ckaz5pv0000010owl2sbs7vmr","_id":"ckaz5wfpc000f3iwl32i52kzu"},{"post_id":"ckd0006el0000r1wl3wbr3kb9","tag_id":"ckd0007o90002r1wlcctt3n57","_id":"ckd0007oa0003r1wl39dc30j8"},{"post_id":"ckd00yez90000y9wl9mg93ls2","tag_id":"ckd0007o90002r1wlcctt3n57","_id":"ckd010k410001y9wl1v4obgmm"}],"Tag":[{"name":"Tips","_id":"ck99og6ho00048fwl8hkp71qk"},{"name":"Promise","_id":"ck99og6if00098fwlfryh0vrx"},{"name":"GearHost","_id":"ck99og6ii000d8fwlfbjx71em"},{"name":"Heroku","_id":"ck99og6ij000h8fwl6wadbrgz"},{"name":"路由端口映射","_id":"ck99og6il000l8fwl8bs5hqek"},{"name":"baidu","_id":"ckaz5hrcs0000zqwl205qa1sl"},{"name":"QRCode","_id":"ckaz5pv0000010owl2sbs7vmr"},{"name":"VPN L2TP","_id":"ckd0007o90002r1wlcctt3n57"}]}}