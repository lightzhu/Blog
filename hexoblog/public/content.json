{"pages":[{"title":"404 Not Found：该页无法显示","text":"","link":"/404.html"}],"posts":[{"title":"百度语音合成演示","text":"百度语音合成 .container{ width:100%; } .btn-primary { margin: 20px; width: 100px; float: right; } 百度语音合成演示 合成 $(\"#btn\").click(function () { // console.log($('#text').val()) let url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=7&pit=8&vol=8&per=1&aue=3&text=\" + $('#text').val().trim(); $(this).attr('href', url) // $.ajax({ // type: \"get\", // url: \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&spd=8&text=\" + $('#text').val().trim(), // // dataType: \"json\", // success: function (data) { // console.log(data); // $('.container a').attr('href') // }, // error: function (err) { // console.log(err) // } // }); setTimeout(function(){ $('#text').val('') },1000) });","link":"/2020/04/21/baidu/"},{"title":"我的第一篇Blog","text":"使用Hexo和 githubpages 搭建个人博客! 快速开始创建一片文章1$ hexo new \"My New Post\" More info: Writing 启动服务1$ hexo server or hexo s More info: Server 生成静态文件1$ hexo generate or hexo g More info: Generating 部署到线上 在根目录下_config.yml 里面任意位置新增以下语句 建议通过密钥的方式关联 12345deploy: type: git # 填上你自己的仓库名，注意后面有`.git` repository: git@github.com:your_username/your_username.github.io.git branch: master 1$ hexo deploy or hexo d 自定义域名 到域名解析后台记录类型选择 CNAME 新增解析， 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填 yourname.github.io 再添加一个解析，记录类型 A 主机记录填 www-&gt; 解析线路选择默认-&gt; 记录值填你 GitHub 的 ip 地址（在 cmd 中）ping yourname.github.io 解析生效后 www.your 域名.xxx 将被解析到 https://yourname.github.io/（你的githubpages主页） 解决每次 deploy 自定义域名失效问题 这个问题原因是每次部署后原来的文件被替换了，而 Hexo 生成的静态文件没有这个 CNAME 记录 解决办法：在 source 文件夹新增文件 CNAME 文件，内容为 你的域名地址 例如：www.2048888.xyz 其他方式：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME 文件，比较麻烦。 前往 Hexo 文档documentation 查看更多帮助。","link":"/2020/03/31/start/"},{"title":"Blog编写技巧","text":"写博文的技巧，及本博客功能设置详解。 设置首页不显示全文(只显示预览)使用 &lt;!-- more --&gt;这个标签，可以放在 md 文件的任意位置，想在哪里结束就在哪里结束。你看到这里的下面一行就有这个句标示。 多标签格式tags: [a, b, c] 或 tags: a b c 插入视频","link":"/2020/04/03/blog-tips/"},{"title":"Promise 简单实现","text":"什么是 Promisepromise 是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）,并未剥夺函数 return 的能力，因此无需层层传递 callback，进行回调获取数据,其代码风格，容易理解，便于维护并且多个异步等待合并便于解决,最终的目的是为了解决 JS 中过多的回调嵌套。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960const PENDING = 'pending'const FULFILLED = 'fulfilled'const REJECTED = 'rejected'class Promise { constructor(executor) { this.status = PENDING //初始化成功的回调 this.onResolvedCb = [] //初始化失败的回调 this.onRejectedCb = [] this.value = null this.reason = null try { executor(this.resolve.bind(this), this.reject.bind(this)) } catch (e) { this.reject(e); } } resolve(value) { console.log(value + 'resolve') //如果当前状态是pending的话调用这个函数可以将状态改成fulfilled if (this.status == PENDING) { this.status = FULFILLED // 将获取到的值赋值给当前对象，并且让所有的成功回调函数执行 this.value = value this.onResolvedCb.forEach((item) =&gt; item(value)) } } reject(reason) { console.log(reason + 'reject') // 如果当前状态是pending的话调用这个函数可以将状态改成rejected if (this.status == PENDING) { this.status = REJECTED // 将原因值赋值给当前对象，并且让所有的失败的回调函数执行 this.reason = reason this.onRejectedCb.forEach((item) =&gt; item(reason)) } } then(onFulfilled, onRejected) { let self = this // 处理如果没有指定相应的回调时的情况 onFulfilled = typeof onFulfilled == 'function' ? onFulfilled : value =&gt; value; onRejected = typeof onRejected == 'function' ? onRejected : reason =&gt; { throw reason }; if (self.status === FULFILLED) { let x = onFulfilled(self.value) } if (self.status === REJECTED) { let y = onRejected(self.reason) } if (self.status === PENDING) { self.onResolvedCb.push(function () { let x = onFulfilled(self.value) }) self.onRejectedCb.push(function () { let x = onRejected(self.reason) }) } }}module.exports = Promise","link":"/2020/04/02/JS/ES6-promise/"},{"title":"免费服务器 GearHost","text":"自己做了个小网站想发布到线上，但是没有服务器？上线还需要域名备案？太麻烦了吧。今天上干货，分享一个永久免费服务器的申请以及使用教程，满足展示、测试、学习等基本需求。 什么是 GearHostGearHost，它是国外一家主机商，提供免费和付费的主机套餐，支持 PHP、.Net 和 Node.js 程序。无需信用卡，注册就可以免费部署 100 个免费的网站和数据库。 首先，注册。这个注册也是不需要信用卡的，注册的其他事项就不啰嗦了，正常进行就好。 第二步，创建一个实例。进入网站后醒目的 Add Cloudsite 按钮你应该看得到，点击后输入一个自定义二级域名，再点击创建等待一会就能完成，成功后会出现在列表里面，点击进入可以看到实例的一些信息。 第三步，部署实例。GearHost 提供三种部署方案，FTP 方式：这个比较简单，FTP 软件用户名和密码登陆，将部署文件直接拉到服务器文件夹里就可以了。开发软件方式：需要下载对应的部署插件，不推荐。连接 github 库的方式，个人推荐这种，方便。 最后，部署完成就可以访问你的网站了（在 overview 里面找到 PREVIEW URL），这个就是访问地址。 总结GearHost 的优点是免费，无需信用卡，建站数量多，但是缺点也很明显，主机容量只有 100MB，免费的 Mysql 数据库只有 5Mb，MongoDB10Mb 内存是 256MB，CPU 占用为 5%，不支持 ssl 等等。个人认为相比较国内而言 GearHost 算是一个很不错的练手工具，毕竟国内根本不存在这样良心的厂商，毕竟免费还能运行 PHP、.Net 或者 Node.js。另外这个网站的实例还是比较有可玩性的，比如自定义域名、add-ons(插件)可以运行比如定时任务等(需要信用卡)等。真是的情况可以自行探索。","link":"/2020/06/03/Tool/gearhost/"},{"title":"免费服务器 Heroku","text":"什么是 Herokuheroku 是一个云服务商，它提供的免费实例可以用于构建个人网站，非常适用于实验性质或是其他简单的小型系统。比如如果你有 onedrive 的话还可以打造自己的私人资源站，速度比某盘要快很多。废话不多说，放教程。 首先，注册。这个注册也是不需要信用卡的，但是要注意一些事项，第一用谷歌邮箱，国内 qq 邮箱等无法注册成功。第二，需要梯子。注册的其他事项就不啰嗦了，正常进行就好。 第二步，创建一个实例。登陆(最近登陆也需要梯子了，有点麻烦)进去之后会看到一个 new 的按钮，点击新增，输入自己的 app 名字，选择实例区域，只有美国和欧洲可选。之后点击 creat app，等待一会创建完成。 第三步，部署实例。heroku 同样提供三种方式的部署方式，Heroku CLI 的方式：需要单独下砸一个软件，但是这个客户端集创建应用与代码管理与一体方便是方便，就是一开始比较麻烦，需要学习成本。还有一种通过 github 关联仓库的方式，首先要先管理 github 账号，点击右上角用户头型，进入账号管理，applications 选项卡里面对你的 github 账号进行关联。在 deploy 选项卡里选择 github 方式进行部署，在输入框输入你的项目名称点击搜索会找到你 git 仓库里面的对应项目,点击 connect，关联成功后点击 deploy branch(发布分支)，等待成功就好了。如果没有部署成功可以参考官方实例 GitHub https://github.com/heroku/node-js-getting-started 最后，可以在实例详情页面看到打开访问链接，还可以在线查看日志。 总结注册需要梯子，Heroku 优点支持语言众多例如 Ruby, Node.js, Clojure, Java, Python，Go 等主流开发语言，运行内存 512M 还可以，一个账号只能申请 5 个免费的实例，且月在线时长有限制没有信用卡验证的用户 550 小时，验证过的 1000 小时，30 分钟无访问后会进入休眠状态。对于个人用户而言基本够用。","link":"/2020/06/03/Tool/heroku/"},{"title":"免费服务器 路由端口映射","text":"上线还需要域名备案？分享一个路由端口映射，搭建永久个人免费服务器使用教程，满足展示、测试、展示等需求。 什么是端口映射端口映射又称端口转发、NAT、虚拟服务器。就是外网访问内网通过端口映射的方式。 首先，固定 ip 的宽带。首先，你拥有一个固定 ip 的宽带，不过没有也没关系可以查看当前路由器的外网地址，比如登陆到路由器查看，还可以用 360 网络测速查看，还有一种更方便的打开网页 iP 地址：https://www.ip138.com/。例如我当前的外网ip为223.94.56.100。 第二步，设置路由器端口转发。登陆路由器找到 Tp-link 路由器：点击【转发规则】——【虚拟服务器】——【添加新条目】；D-link 路由器：点击【进阶设定】—【虚拟服务器】进行设置，先点【激活】，才可设置；小米路由器：入管理界面后，点击【高级设置】——【端口转发】———【添加规则】；还有的路由器的这个功能是单独在应用程序里面的。但是不管那种路由器都是先找到虚拟服务器，然后添加转发规则。添加指导：常用服务器选择 http；外部端口任意，避开常用的端口；内部端口就是你内网服务器的端口，我们都以 8088 为例（我的本机服务会在这个端口启动）；IP 地址填写自己内网 ip 地址（不知道的去自己网络中心查看）；协议类型选择 ALL；点击保存，一天端口转发规则就设置好了。 第三步，固定本机内网 ip。mac 下打开网络偏好设置-高级-TCP/P 配置 ipv4 为手动，然后手动填写一个内网 ip 应用成功后可使用。windows 打开电脑的“网络和共享中心”，在“Internet 协议版本 4 属性”对话框中，选中“使用下面的 ip 地址”项目，然后输入 ip 地址，请注意设定的 ip 地址是否合理有效。还有一种方式就是在路由器中将“你要的内网 ip”与网卡 mac 地址绑定。 最后，启动本地服务器外网环境通过 223.94.56.100:8088 这个地址就访问当前的本地服务了，这样一个基于路由器的内网穿透就成功了。这种方式的穿透速度还是可以的，还有就是很方便的将自己的作品像别人展示，缺点是如果没有固定 ip 每次的访问地址都会变。","link":"/2020/06/03/Tool/ippenetrate/"},{"title":"二维码生成器","text":"网址二维码生成器 .container{ width:100%; } .form-group { display:flex; } .form-group label{ line-height:34px; margin:0; } .form-group .form-control{ width:66%; margin-right:10px; } .form-group .btn{ margin:0px; } .image-box{ min-height:350px; text-align:center; } .image-box img{ min-width:300px; min-height:300px; height:auto; border:1px solid #ccc; } 二维码生成器 网 址： 确认 网 址： 确认 $(\"#creatCode\").click(function(){ if($('#website').val().length){ console.log($('#website').val()) getQrcode($('#website').val()) } }) function getQrcode(url){ $.ajax({ type: \"post\", url: \"https://webadd.herokuapp.com/qrcode\", data:{url:url,type:1}, dataType: \"json\", success: function (data) { $('.web .img').eq(0).attr('src',data.url) $('#website').val('') }, error: function (err) { console.log(err) } }) } $(\"#creatFileCode\").click(function(){ var files = $('#file').prop('files'); var data = new FormData(); data.append('file', files[0]); data.append('type', '2'); console.log(data) getFileQrcode(data) }) function getFileQrcode(params){ $.ajax({ type: \"post\", // url: \"http://192.168.1.222:9090/qrcode\", url:\"https://api.2048888.xyz/qrcode\", data:params, cache: false, processData: false, contentType: false, success: function (data) { console.log(data) $('.file-box .img').eq(0).attr('src',data.url) }, error: function (err) { console.log(err) } }) }","link":"/2020/06/03/Tool/qrcode/"},{"title":"免费VPN  L2TP方式,mac和ios 配置方式","text":"教你免费科学上网无需安装额外工具，L2TP 方式配置方式，mac 和 ios 通用的翻墙方式，重点是完全免费。 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息 Mac 端配置第一步，在系统界面的右上角点击网络图标，打开网络偏好设置；第二步，点击网络配置屏幕上的 “+” 按钮； 第三步，在 “Interface” 选择 “VPN”，”VPN Type” 选择 “L2TP/IPsec” ，服务名称自定义。并点击 “创建” 按钮； 第四步，填写 vpn 配置 ip,用户名写 vpn（小写）； 第五步，打开认证设置，密码：vpn ,共享密钥：vpn； 第六步，点击应用保持，点击连接，成功之后会显示已经连接，然后就可以愉快玩耍了。 iPhone/ iPad 端配置第一步，设置,找到 vpn； 第二步，添加 VPN 配置 第三步， 类型选择选择 “L2TP” ，描述自定义，账户：vpn、密码和密钥都是：vpn,点击完成； 第四步，回到 vpn 列表，选中一个 vpn 配置，点击连接； 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！","link":"/2020/07/24/Node/vpn_L2TP/"},{"title":"免费VPN  L2TP方式,window和android 配置方式","text":"教你免费科学上网无需安装额外工具，L2TP 方式配置方式，window 和 android 通用的翻墙方式，重点是完全免费。 获取最新 vpn ip 方式可以加钉钉群：31971273，每天定时更新节点信息 windows 端配置第一步，在 Windows 界面的右下角右击网络图标，并点击 “打开网络和共享中心”；第二步，在 “网络共享中心” 点击 “建立一个新的连接或网络” 第三步，选择 “连接到工作区” 第四步，选择 “使用我的 Internet 连接 (VPN)” 第五步，输入你找到的 ip 地址，复选框 “现在不连接; 仅进行设置以便稍后连接”； 第六步，如果出现用户名和密码的弹出窗口，在用户名和密码字段输入 “vpn” 第七步，当 “连接已经可以使用” 消息出现，点击 “关闭” 按钮。请勿点击 “现在连接” 按钮 第八步，到 “网络和共享中心” 并点击 “更改适配器设置” 第九步，当前定义的 VPN 连接设置被列出来了。右击你在上一步创建的图标，并点击 “属性” 第十步，在属性这一屏，切换到 “安全” 标签 第十一步，点击 “高级设置” 按钮,点击 “使用预共享密钥作身份验证” 并在 “密钥” 字段输入 “vpn” 第十二步，上述配置完成后，点击 “确定” 按钮两次，以关闭 VPN 连接设置的属性界面第十三步，双击已建立的 VPN 连接设置，以下屏幕将出现，在 “用户名” 和 “密码” 字段都输入 “vpn”，点击连接 第十四步，如果成功建立 VPN 连接， VPN 连接图标出现在屏幕上，当您单击 Windows 屏幕右下角的网络图标会将其列出。 “VPN 连接” 图标的状态应该是 “已连接” android 端配置（华为手机为例）第一步，设置,找到更多连接 第二步，VPN 选项点进去 第三步， 点击田间 vpn 网络 第四步，如下图示例配置，名称：自定义、类型：L2TP/IPSec PSK、服务器地址：你找到的 ip、IPSec 共享密钥：vpn、转发路线：0.0.0.0/0，点击保存 第五步， 回到 vpn 列表界面，点击一个配置输入用户名密码：都是 vpn 点击连接 连接成功后会显示已连接 说明：所有 ip 节点均来自https://www.vpngate.net/cn/，所有科学上网都没有稳定的，连接不上了就去试别的 ip!!更多科学上网方式欢迎交流！","link":"/2020/07/24/Node/vpn2/"}],"tags":[{"name":"Tips","slug":"Tips","link":"/tags/Tips/"},{"name":"Promise","slug":"Promise","link":"/tags/Promise/"},{"name":"GearHost","slug":"GearHost","link":"/tags/GearHost/"},{"name":"Heroku","slug":"Heroku","link":"/tags/Heroku/"},{"name":"路由端口映射","slug":"路由端口映射","link":"/tags/%E8%B7%AF%E7%94%B1%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"},{"name":"baidu","slug":"baidu","link":"/tags/baidu/"},{"name":"QRCode","slug":"QRCode","link":"/tags/QRCode/"},{"name":"VPN L2TP","slug":"VPN-L2TP","link":"/tags/VPN-L2TP/"}],"categories":[{"name":"JS","slug":"JS","link":"/categories/JS/"},{"name":"Tool","slug":"Tool","link":"/categories/Tool/"},{"name":"Node","slug":"Node","link":"/categories/Node/"}]}